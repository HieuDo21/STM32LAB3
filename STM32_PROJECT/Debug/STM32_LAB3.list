
STM32_LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002578  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002684  08002684  00012684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026a8  080026a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080026a8  080026a8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026a8  080026a8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026a8  080026a8  000126a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026ac  080026ac  000126ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080026b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000074  08002724  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08002724  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009577  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bcb  00000000  00000000  00029614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0002b1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002bbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001b60  00000000  00000000  0002c518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b964  00000000  00000000  0002e078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082482  00000000  00000000  000399dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bbe5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002814  00000000  00000000  000bbeb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	0800266c 	.word	0x0800266c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	0800266c 	.word	0x0800266c

0800014c <FsmForTrafficLight>:
int timeForYellow = 3000;
int timeForRed = 8000;
int timeForGreen_tmp;
int timeForYellow_tmp;
int timeForRed_tmp;
void FsmForTrafficLight (void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status){
 8000150:	4b9a      	ldr	r3, [pc, #616]	; (80003bc <FsmForTrafficLight+0x270>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b13      	cmp	r3, #19
 8000158:	f200 82a2 	bhi.w	80006a0 <FsmForTrafficLight+0x554>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <FsmForTrafficLight+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	080001b5 	.word	0x080001b5
 8000168:	080001c9 	.word	0x080001c9
 800016c:	08000275 	.word	0x08000275
 8000170:	0800030f 	.word	0x0800030f
 8000174:	080003e1 	.word	0x080003e1
 8000178:	080006a1 	.word	0x080006a1
 800017c:	080006a1 	.word	0x080006a1
 8000180:	080006a1 	.word	0x080006a1
 8000184:	080006a1 	.word	0x080006a1
 8000188:	0800047b 	.word	0x0800047b
 800018c:	08000515 	.word	0x08000515
 8000190:	080005b1 	.word	0x080005b1
 8000194:	080006a1 	.word	0x080006a1
 8000198:	080006a1 	.word	0x080006a1
 800019c:	080006a1 	.word	0x080006a1
 80001a0:	080006a1 	.word	0x080006a1
 80001a4:	080006a1 	.word	0x080006a1
 80001a8:	080006a1 	.word	0x080006a1
 80001ac:	080006a1 	.word	0x080006a1
 80001b0:	0800067d 	.word	0x0800067d
	case INIT:
		status = RED1_GREEN2;
 80001b4:	4b81      	ldr	r3, [pc, #516]	; (80003bc <FsmForTrafficLight+0x270>)
 80001b6:	2202      	movs	r2, #2
 80001b8:	601a      	str	r2, [r3, #0]
		setTimer(timeForGreen, 0);
 80001ba:	4b81      	ldr	r3, [pc, #516]	; (80003c0 <FsmForTrafficLight+0x274>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	2100      	movs	r1, #0
 80001c0:	4618      	mov	r0, r3
 80001c2:	f000 fe2f 	bl	8000e24 <setTimer>
		break;
 80001c6:	e294      	b.n	80006f2 <FsmForTrafficLight+0x5a6>
	case RED1_GREEN2:
		value2 = timer_counter[0];
 80001c8:	4b7e      	ldr	r3, [pc, #504]	; (80003c4 <FsmForTrafficLight+0x278>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a7e      	ldr	r2, [pc, #504]	; (80003c8 <FsmForTrafficLight+0x27c>)
 80001ce:	6013      	str	r3, [r2, #0]
		value1 = timer_counter[0] + timeForYellow/10;
 80001d0:	4b7c      	ldr	r3, [pc, #496]	; (80003c4 <FsmForTrafficLight+0x278>)
 80001d2:	681a      	ldr	r2, [r3, #0]
 80001d4:	4b7d      	ldr	r3, [pc, #500]	; (80003cc <FsmForTrafficLight+0x280>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	497d      	ldr	r1, [pc, #500]	; (80003d0 <FsmForTrafficLight+0x284>)
 80001da:	fb81 0103 	smull	r0, r1, r1, r3
 80001de:	1089      	asrs	r1, r1, #2
 80001e0:	17db      	asrs	r3, r3, #31
 80001e2:	1acb      	subs	r3, r1, r3
 80001e4:	4413      	add	r3, r2
 80001e6:	4a7b      	ldr	r2, [pc, #492]	; (80003d4 <FsmForTrafficLight+0x288>)
 80001e8:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin, SET);
 80001ea:	2201      	movs	r2, #1
 80001ec:	2110      	movs	r1, #16
 80001ee:	487a      	ldr	r0, [pc, #488]	; (80003d8 <FsmForTrafficLight+0x28c>)
 80001f0:	f001 fa1b 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, RESET);
 80001f4:	2200      	movs	r2, #0
 80001f6:	2120      	movs	r1, #32
 80001f8:	4877      	ldr	r0, [pc, #476]	; (80003d8 <FsmForTrafficLight+0x28c>)
 80001fa:	f001 fa16 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, RESET);
 80001fe:	2200      	movs	r2, #0
 8000200:	2140      	movs	r1, #64	; 0x40
 8000202:	4875      	ldr	r0, [pc, #468]	; (80003d8 <FsmForTrafficLight+0x28c>)
 8000204:	f001 fa11 	bl	800162a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin, RESET);
 8000208:	2200      	movs	r2, #0
 800020a:	2180      	movs	r1, #128	; 0x80
 800020c:	4872      	ldr	r0, [pc, #456]	; (80003d8 <FsmForTrafficLight+0x28c>)
 800020e:	f001 fa0c 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin, RESET);
 8000212:	2200      	movs	r2, #0
 8000214:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000218:	486f      	ldr	r0, [pc, #444]	; (80003d8 <FsmForTrafficLight+0x28c>)
 800021a:	f001 fa06 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, SET);
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000224:	486c      	ldr	r0, [pc, #432]	; (80003d8 <FsmForTrafficLight+0x28c>)
 8000226:	f001 fa00 	bl	800162a <HAL_GPIO_WritePin>
		if(timer_flag[0] == 1){
 800022a:	4b6c      	ldr	r3, [pc, #432]	; (80003dc <FsmForTrafficLight+0x290>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	2b01      	cmp	r3, #1
 8000230:	d108      	bne.n	8000244 <FsmForTrafficLight+0xf8>
			status = RED1_YELLOW2;
 8000232:	4b62      	ldr	r3, [pc, #392]	; (80003bc <FsmForTrafficLight+0x270>)
 8000234:	2203      	movs	r2, #3
 8000236:	601a      	str	r2, [r3, #0]
			setTimer(timeForYellow, 0);
 8000238:	4b64      	ldr	r3, [pc, #400]	; (80003cc <FsmForTrafficLight+0x280>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fdf0 	bl	8000e24 <setTimer>
		}
		if (isButtonPressed(0)){
 8000244:	2000      	movs	r0, #0
 8000246:	f000 fa67 	bl	8000718 <isButtonPressed>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	f000 8229 	beq.w	80006a4 <FsmForTrafficLight+0x558>
			status = RED_LIGHT_CONFIG;
 8000252:	4b5a      	ldr	r3, [pc, #360]	; (80003bc <FsmForTrafficLight+0x270>)
 8000254:	220a      	movs	r2, #10
 8000256:	601a      	str	r2, [r3, #0]
			clearAllLight();
 8000258:	f000 fbf4 	bl	8000a44 <clearAllLight>
			value1 = 0;
 800025c:	4b5d      	ldr	r3, [pc, #372]	; (80003d4 <FsmForTrafficLight+0x288>)
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
			value2 = 0;
 8000262:	4b59      	ldr	r3, [pc, #356]	; (80003c8 <FsmForTrafficLight+0x27c>)
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
			setTimer(500, 0);
 8000268:	2100      	movs	r1, #0
 800026a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800026e:	f000 fdd9 	bl	8000e24 <setTimer>
		}
		break;
 8000272:	e217      	b.n	80006a4 <FsmForTrafficLight+0x558>
	case RED1_YELLOW2:
		value2 = timer_counter[0];
 8000274:	4b53      	ldr	r3, [pc, #332]	; (80003c4 <FsmForTrafficLight+0x278>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a53      	ldr	r2, [pc, #332]	; (80003c8 <FsmForTrafficLight+0x27c>)
 800027a:	6013      	str	r3, [r2, #0]
		value1 = timer_counter[0];
 800027c:	4b51      	ldr	r3, [pc, #324]	; (80003c4 <FsmForTrafficLight+0x278>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a54      	ldr	r2, [pc, #336]	; (80003d4 <FsmForTrafficLight+0x288>)
 8000282:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin, SET);
 8000284:	2201      	movs	r2, #1
 8000286:	2110      	movs	r1, #16
 8000288:	4853      	ldr	r0, [pc, #332]	; (80003d8 <FsmForTrafficLight+0x28c>)
 800028a:	f001 f9ce 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, RESET);
 800028e:	2200      	movs	r2, #0
 8000290:	2120      	movs	r1, #32
 8000292:	4851      	ldr	r0, [pc, #324]	; (80003d8 <FsmForTrafficLight+0x28c>)
 8000294:	f001 f9c9 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	2140      	movs	r1, #64	; 0x40
 800029c:	484e      	ldr	r0, [pc, #312]	; (80003d8 <FsmForTrafficLight+0x28c>)
 800029e:	f001 f9c4 	bl	800162a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin, RESET);
 80002a2:	2200      	movs	r2, #0
 80002a4:	2180      	movs	r1, #128	; 0x80
 80002a6:	484c      	ldr	r0, [pc, #304]	; (80003d8 <FsmForTrafficLight+0x28c>)
 80002a8:	f001 f9bf 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin, SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b2:	4849      	ldr	r0, [pc, #292]	; (80003d8 <FsmForTrafficLight+0x28c>)
 80002b4:	f001 f9b9 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, RESET);
 80002b8:	2200      	movs	r2, #0
 80002ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002be:	4846      	ldr	r0, [pc, #280]	; (80003d8 <FsmForTrafficLight+0x28c>)
 80002c0:	f001 f9b3 	bl	800162a <HAL_GPIO_WritePin>
		if(timer_flag[0] == 1){
 80002c4:	4b45      	ldr	r3, [pc, #276]	; (80003dc <FsmForTrafficLight+0x290>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d108      	bne.n	80002de <FsmForTrafficLight+0x192>
			status = GREEN1_RED2;
 80002cc:	4b3b      	ldr	r3, [pc, #236]	; (80003bc <FsmForTrafficLight+0x270>)
 80002ce:	2204      	movs	r2, #4
 80002d0:	601a      	str	r2, [r3, #0]
			setTimer(timeForGreen, 0);
 80002d2:	4b3b      	ldr	r3, [pc, #236]	; (80003c0 <FsmForTrafficLight+0x274>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fda3 	bl	8000e24 <setTimer>
		}
		if (isButtonPressed(0)){
 80002de:	2000      	movs	r0, #0
 80002e0:	f000 fa1a 	bl	8000718 <isButtonPressed>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f000 81de 	beq.w	80006a8 <FsmForTrafficLight+0x55c>
			status = RED_LIGHT_CONFIG;
 80002ec:	4b33      	ldr	r3, [pc, #204]	; (80003bc <FsmForTrafficLight+0x270>)
 80002ee:	220a      	movs	r2, #10
 80002f0:	601a      	str	r2, [r3, #0]
			clearAllLight();
 80002f2:	f000 fba7 	bl	8000a44 <clearAllLight>
			value1 = 0;
 80002f6:	4b37      	ldr	r3, [pc, #220]	; (80003d4 <FsmForTrafficLight+0x288>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
			value2 = 0;
 80002fc:	4b32      	ldr	r3, [pc, #200]	; (80003c8 <FsmForTrafficLight+0x27c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
			setTimer(500, 0);
 8000302:	2100      	movs	r1, #0
 8000304:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000308:	f000 fd8c 	bl	8000e24 <setTimer>
		}
		break;
 800030c:	e1cc      	b.n	80006a8 <FsmForTrafficLight+0x55c>
	case GREEN1_RED2:
		value2 = timer_counter[0] + timeForYellow/10;
 800030e:	4b2d      	ldr	r3, [pc, #180]	; (80003c4 <FsmForTrafficLight+0x278>)
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	4b2e      	ldr	r3, [pc, #184]	; (80003cc <FsmForTrafficLight+0x280>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	492e      	ldr	r1, [pc, #184]	; (80003d0 <FsmForTrafficLight+0x284>)
 8000318:	fb81 0103 	smull	r0, r1, r1, r3
 800031c:	1089      	asrs	r1, r1, #2
 800031e:	17db      	asrs	r3, r3, #31
 8000320:	1acb      	subs	r3, r1, r3
 8000322:	4413      	add	r3, r2
 8000324:	4a28      	ldr	r2, [pc, #160]	; (80003c8 <FsmForTrafficLight+0x27c>)
 8000326:	6013      	str	r3, [r2, #0]
		value1 = timer_counter[0];
 8000328:	4b26      	ldr	r3, [pc, #152]	; (80003c4 <FsmForTrafficLight+0x278>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a29      	ldr	r2, [pc, #164]	; (80003d4 <FsmForTrafficLight+0x288>)
 800032e:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin, RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2110      	movs	r1, #16
 8000334:	4828      	ldr	r0, [pc, #160]	; (80003d8 <FsmForTrafficLight+0x28c>)
 8000336:	f001 f978 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	2120      	movs	r1, #32
 800033e:	4826      	ldr	r0, [pc, #152]	; (80003d8 <FsmForTrafficLight+0x28c>)
 8000340:	f001 f973 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, SET);
 8000344:	2201      	movs	r2, #1
 8000346:	2140      	movs	r1, #64	; 0x40
 8000348:	4823      	ldr	r0, [pc, #140]	; (80003d8 <FsmForTrafficLight+0x28c>)
 800034a:	f001 f96e 	bl	800162a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin, SET);
 800034e:	2201      	movs	r2, #1
 8000350:	2180      	movs	r1, #128	; 0x80
 8000352:	4821      	ldr	r0, [pc, #132]	; (80003d8 <FsmForTrafficLight+0x28c>)
 8000354:	f001 f969 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin, RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800035e:	481e      	ldr	r0, [pc, #120]	; (80003d8 <FsmForTrafficLight+0x28c>)
 8000360:	f001 f963 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	f44f 7100 	mov.w	r1, #512	; 0x200
 800036a:	481b      	ldr	r0, [pc, #108]	; (80003d8 <FsmForTrafficLight+0x28c>)
 800036c:	f001 f95d 	bl	800162a <HAL_GPIO_WritePin>
		if(timer_flag[0] == 1){
 8000370:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <FsmForTrafficLight+0x290>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d108      	bne.n	800038a <FsmForTrafficLight+0x23e>
			status = YELLOW1_RED2;
 8000378:	4b10      	ldr	r3, [pc, #64]	; (80003bc <FsmForTrafficLight+0x270>)
 800037a:	2205      	movs	r2, #5
 800037c:	601a      	str	r2, [r3, #0]
			setTimer(timeForYellow, 0);
 800037e:	4b13      	ldr	r3, [pc, #76]	; (80003cc <FsmForTrafficLight+0x280>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2100      	movs	r1, #0
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fd4d 	bl	8000e24 <setTimer>
		}
		if (isButtonPressed(0)){
 800038a:	2000      	movs	r0, #0
 800038c:	f000 f9c4 	bl	8000718 <isButtonPressed>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	f000 818a 	beq.w	80006ac <FsmForTrafficLight+0x560>
			status = RED_LIGHT_CONFIG;
 8000398:	4b08      	ldr	r3, [pc, #32]	; (80003bc <FsmForTrafficLight+0x270>)
 800039a:	220a      	movs	r2, #10
 800039c:	601a      	str	r2, [r3, #0]
			clearAllLight();
 800039e:	f000 fb51 	bl	8000a44 <clearAllLight>
			value1 = 0;
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <FsmForTrafficLight+0x288>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
			value2 = 0;
 80003a8:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <FsmForTrafficLight+0x27c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
			setTimer(500, 0);
 80003ae:	2100      	movs	r1, #0
 80003b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003b4:	f000 fd36 	bl	8000e24 <setTimer>
		}
		break;
 80003b8:	e178      	b.n	80006ac <FsmForTrafficLight+0x560>
 80003ba:	bf00      	nop
 80003bc:	20000090 	.word	0x20000090
 80003c0:	20000000 	.word	0x20000000
 80003c4:	200000c8 	.word	0x200000c8
 80003c8:	20000050 	.word	0x20000050
 80003cc:	20000004 	.word	0x20000004
 80003d0:	66666667 	.word	0x66666667
 80003d4:	2000004c 	.word	0x2000004c
 80003d8:	40010800 	.word	0x40010800
 80003dc:	200000bc 	.word	0x200000bc
	case YELLOW1_RED2:
		value2 = timer_counter[0];
 80003e0:	4bb4      	ldr	r3, [pc, #720]	; (80006b4 <FsmForTrafficLight+0x568>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4ab4      	ldr	r2, [pc, #720]	; (80006b8 <FsmForTrafficLight+0x56c>)
 80003e6:	6013      	str	r3, [r2, #0]
		value1 = timer_counter[0];
 80003e8:	4bb2      	ldr	r3, [pc, #712]	; (80006b4 <FsmForTrafficLight+0x568>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4ab3      	ldr	r2, [pc, #716]	; (80006bc <FsmForTrafficLight+0x570>)
 80003ee:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin, RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2110      	movs	r1, #16
 80003f4:	48b2      	ldr	r0, [pc, #712]	; (80006c0 <FsmForTrafficLight+0x574>)
 80003f6:	f001 f918 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2120      	movs	r1, #32
 80003fe:	48b0      	ldr	r0, [pc, #704]	; (80006c0 <FsmForTrafficLight+0x574>)
 8000400:	f001 f913 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	2140      	movs	r1, #64	; 0x40
 8000408:	48ad      	ldr	r0, [pc, #692]	; (80006c0 <FsmForTrafficLight+0x574>)
 800040a:	f001 f90e 	bl	800162a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin, SET);
 800040e:	2201      	movs	r2, #1
 8000410:	2180      	movs	r1, #128	; 0x80
 8000412:	48ab      	ldr	r0, [pc, #684]	; (80006c0 <FsmForTrafficLight+0x574>)
 8000414:	f001 f909 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin, RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800041e:	48a8      	ldr	r0, [pc, #672]	; (80006c0 <FsmForTrafficLight+0x574>)
 8000420:	f001 f903 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800042a:	48a5      	ldr	r0, [pc, #660]	; (80006c0 <FsmForTrafficLight+0x574>)
 800042c:	f001 f8fd 	bl	800162a <HAL_GPIO_WritePin>
		if(timer_flag[0] == 1){
 8000430:	4ba4      	ldr	r3, [pc, #656]	; (80006c4 <FsmForTrafficLight+0x578>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2b01      	cmp	r3, #1
 8000436:	d108      	bne.n	800044a <FsmForTrafficLight+0x2fe>
			status = RED1_GREEN2;
 8000438:	4ba3      	ldr	r3, [pc, #652]	; (80006c8 <FsmForTrafficLight+0x57c>)
 800043a:	2202      	movs	r2, #2
 800043c:	601a      	str	r2, [r3, #0]
			setTimer(timeForGreen, 0);
 800043e:	4ba3      	ldr	r3, [pc, #652]	; (80006cc <FsmForTrafficLight+0x580>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2100      	movs	r1, #0
 8000444:	4618      	mov	r0, r3
 8000446:	f000 fced 	bl	8000e24 <setTimer>
		}
		if (isButtonPressed(0)){
 800044a:	2000      	movs	r0, #0
 800044c:	f000 f964 	bl	8000718 <isButtonPressed>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	f000 812c 	beq.w	80006b0 <FsmForTrafficLight+0x564>
			status = RED_LIGHT_CONFIG;
 8000458:	4b9b      	ldr	r3, [pc, #620]	; (80006c8 <FsmForTrafficLight+0x57c>)
 800045a:	220a      	movs	r2, #10
 800045c:	601a      	str	r2, [r3, #0]
			clearAllLight();
 800045e:	f000 faf1 	bl	8000a44 <clearAllLight>
			value1 = 0;
 8000462:	4b96      	ldr	r3, [pc, #600]	; (80006bc <FsmForTrafficLight+0x570>)
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
			value2 = 0;
 8000468:	4b93      	ldr	r3, [pc, #588]	; (80006b8 <FsmForTrafficLight+0x56c>)
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
			setTimer(500, 0);
 800046e:	2100      	movs	r1, #0
 8000470:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000474:	f000 fcd6 	bl	8000e24 <setTimer>
		}
		break;
 8000478:	e11a      	b.n	80006b0 <FsmForTrafficLight+0x564>
	case RED_LIGHT_CONFIG:
		if(isButtonPressed(1)){
 800047a:	2001      	movs	r0, #1
 800047c:	f000 f94c 	bl	8000718 <isButtonPressed>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d00e      	beq.n	80004a4 <FsmForTrafficLight+0x358>
			if(value1 > 9900){
 8000486:	4b8d      	ldr	r3, [pc, #564]	; (80006bc <FsmForTrafficLight+0x570>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f242 62ac 	movw	r2, #9900	; 0x26ac
 800048e:	4293      	cmp	r3, r2
 8000490:	dd03      	ble.n	800049a <FsmForTrafficLight+0x34e>
				value1 = 0;
 8000492:	4b8a      	ldr	r3, [pc, #552]	; (80006bc <FsmForTrafficLight+0x570>)
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	e004      	b.n	80004a4 <FsmForTrafficLight+0x358>
			}else{
				value1 += 100;
 800049a:	4b88      	ldr	r3, [pc, #544]	; (80006bc <FsmForTrafficLight+0x570>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3364      	adds	r3, #100	; 0x64
 80004a0:	4a86      	ldr	r2, [pc, #536]	; (80006bc <FsmForTrafficLight+0x570>)
 80004a2:	6013      	str	r3, [r2, #0]
			}
		}
		if(isButtonPressed(2)){
 80004a4:	2002      	movs	r0, #2
 80004a6:	f000 f937 	bl	8000718 <isButtonPressed>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d008      	beq.n	80004c2 <FsmForTrafficLight+0x376>
			timeForRed_tmp = value1*10;
 80004b0:	4b82      	ldr	r3, [pc, #520]	; (80006bc <FsmForTrafficLight+0x570>)
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	4613      	mov	r3, r2
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	4413      	add	r3, r2
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	461a      	mov	r2, r3
 80004be:	4b84      	ldr	r3, [pc, #528]	; (80006d0 <FsmForTrafficLight+0x584>)
 80004c0:	601a      	str	r2, [r3, #0]
		}

		if(timer_flag[0] == 1){
 80004c2:	4b80      	ldr	r3, [pc, #512]	; (80006c4 <FsmForTrafficLight+0x578>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b01      	cmp	r3, #1
 80004c8:	d10c      	bne.n	80004e4 <FsmForTrafficLight+0x398>
			HAL_GPIO_TogglePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin);
 80004ca:	2110      	movs	r1, #16
 80004cc:	487c      	ldr	r0, [pc, #496]	; (80006c0 <FsmForTrafficLight+0x574>)
 80004ce:	f001 f8c4 	bl	800165a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin);
 80004d2:	2180      	movs	r1, #128	; 0x80
 80004d4:	487a      	ldr	r0, [pc, #488]	; (80006c0 <FsmForTrafficLight+0x574>)
 80004d6:	f001 f8c0 	bl	800165a <HAL_GPIO_TogglePin>
			setTimer(500, 0);
 80004da:	2100      	movs	r1, #0
 80004dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004e0:	f000 fca0 	bl	8000e24 <setTimer>
		}
		if (isButtonPressed(0)){
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 f917 	bl	8000718 <isButtonPressed>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	f000 80f9 	beq.w	80006e4 <FsmForTrafficLight+0x598>
			status = YELLOW_LIGHT_CONFIG;
 80004f2:	4b75      	ldr	r3, [pc, #468]	; (80006c8 <FsmForTrafficLight+0x57c>)
 80004f4:	220b      	movs	r2, #11
 80004f6:	601a      	str	r2, [r3, #0]
			clearAllLight();
 80004f8:	f000 faa4 	bl	8000a44 <clearAllLight>
			value1 = 0;
 80004fc:	4b6f      	ldr	r3, [pc, #444]	; (80006bc <FsmForTrafficLight+0x570>)
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
			value2 = 0;
 8000502:	4b6d      	ldr	r3, [pc, #436]	; (80006b8 <FsmForTrafficLight+0x56c>)
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
			setTimer(500, 0);
 8000508:	2100      	movs	r1, #0
 800050a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800050e:	f000 fc89 	bl	8000e24 <setTimer>
		}
		break;
 8000512:	e0e7      	b.n	80006e4 <FsmForTrafficLight+0x598>
	case YELLOW_LIGHT_CONFIG:
		if(isButtonPressed(1)){
 8000514:	2001      	movs	r0, #1
 8000516:	f000 f8ff 	bl	8000718 <isButtonPressed>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d00e      	beq.n	800053e <FsmForTrafficLight+0x3f2>
			if(value1 > 9900){
 8000520:	4b66      	ldr	r3, [pc, #408]	; (80006bc <FsmForTrafficLight+0x570>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f242 62ac 	movw	r2, #9900	; 0x26ac
 8000528:	4293      	cmp	r3, r2
 800052a:	dd03      	ble.n	8000534 <FsmForTrafficLight+0x3e8>
				value1 = 0;
 800052c:	4b63      	ldr	r3, [pc, #396]	; (80006bc <FsmForTrafficLight+0x570>)
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	e004      	b.n	800053e <FsmForTrafficLight+0x3f2>
			}else{
				value1 += 100;
 8000534:	4b61      	ldr	r3, [pc, #388]	; (80006bc <FsmForTrafficLight+0x570>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	3364      	adds	r3, #100	; 0x64
 800053a:	4a60      	ldr	r2, [pc, #384]	; (80006bc <FsmForTrafficLight+0x570>)
 800053c:	6013      	str	r3, [r2, #0]
			}
		}
		if(isButtonPressed(2)){
 800053e:	2002      	movs	r0, #2
 8000540:	f000 f8ea 	bl	8000718 <isButtonPressed>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d008      	beq.n	800055c <FsmForTrafficLight+0x410>
			timeForYellow_tmp = value1*10;
 800054a:	4b5c      	ldr	r3, [pc, #368]	; (80006bc <FsmForTrafficLight+0x570>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	4613      	mov	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	4413      	add	r3, r2
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	461a      	mov	r2, r3
 8000558:	4b5e      	ldr	r3, [pc, #376]	; (80006d4 <FsmForTrafficLight+0x588>)
 800055a:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[0] == 1){
 800055c:	4b59      	ldr	r3, [pc, #356]	; (80006c4 <FsmForTrafficLight+0x578>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d10d      	bne.n	8000580 <FsmForTrafficLight+0x434>
			HAL_GPIO_TogglePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin);
 8000564:	2120      	movs	r1, #32
 8000566:	4856      	ldr	r0, [pc, #344]	; (80006c0 <FsmForTrafficLight+0x574>)
 8000568:	f001 f877 	bl	800165a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin);
 800056c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000570:	4853      	ldr	r0, [pc, #332]	; (80006c0 <FsmForTrafficLight+0x574>)
 8000572:	f001 f872 	bl	800165a <HAL_GPIO_TogglePin>
			setTimer(500, 0);
 8000576:	2100      	movs	r1, #0
 8000578:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800057c:	f000 fc52 	bl	8000e24 <setTimer>
		}
		if (isButtonPressed(0)){
 8000580:	2000      	movs	r0, #0
 8000582:	f000 f8c9 	bl	8000718 <isButtonPressed>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	f000 80ad 	beq.w	80006e8 <FsmForTrafficLight+0x59c>
			status = GREEN_LIGHT_CONFIG;
 800058e:	4b4e      	ldr	r3, [pc, #312]	; (80006c8 <FsmForTrafficLight+0x57c>)
 8000590:	220c      	movs	r2, #12
 8000592:	601a      	str	r2, [r3, #0]
			clearAllLight();
 8000594:	f000 fa56 	bl	8000a44 <clearAllLight>
			value1 = 0;
 8000598:	4b48      	ldr	r3, [pc, #288]	; (80006bc <FsmForTrafficLight+0x570>)
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
			value2 = 0;
 800059e:	4b46      	ldr	r3, [pc, #280]	; (80006b8 <FsmForTrafficLight+0x56c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
			setTimer(500, 0);
 80005a4:	2100      	movs	r1, #0
 80005a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005aa:	f000 fc3b 	bl	8000e24 <setTimer>
		}
		break;
 80005ae:	e09b      	b.n	80006e8 <FsmForTrafficLight+0x59c>
	case GREEN_LIGHT_CONFIG:

		if(isButtonPressed(1)){
 80005b0:	2001      	movs	r0, #1
 80005b2:	f000 f8b1 	bl	8000718 <isButtonPressed>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00e      	beq.n	80005da <FsmForTrafficLight+0x48e>
			if(value1 > 9900){
 80005bc:	4b3f      	ldr	r3, [pc, #252]	; (80006bc <FsmForTrafficLight+0x570>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f242 62ac 	movw	r2, #9900	; 0x26ac
 80005c4:	4293      	cmp	r3, r2
 80005c6:	dd03      	ble.n	80005d0 <FsmForTrafficLight+0x484>
				value1 = 0;
 80005c8:	4b3c      	ldr	r3, [pc, #240]	; (80006bc <FsmForTrafficLight+0x570>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	e004      	b.n	80005da <FsmForTrafficLight+0x48e>
			}else{
				value1 += 100;
 80005d0:	4b3a      	ldr	r3, [pc, #232]	; (80006bc <FsmForTrafficLight+0x570>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3364      	adds	r3, #100	; 0x64
 80005d6:	4a39      	ldr	r2, [pc, #228]	; (80006bc <FsmForTrafficLight+0x570>)
 80005d8:	6013      	str	r3, [r2, #0]
			}
		}
		if(isButtonPressed(2)){
 80005da:	2002      	movs	r0, #2
 80005dc:	f000 f89c 	bl	8000718 <isButtonPressed>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d026      	beq.n	8000634 <FsmForTrafficLight+0x4e8>
			timeForGreen_tmp = value1*10;
 80005e6:	4b35      	ldr	r3, [pc, #212]	; (80006bc <FsmForTrafficLight+0x570>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4613      	mov	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	4413      	add	r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	461a      	mov	r2, r3
 80005f4:	4b38      	ldr	r3, [pc, #224]	; (80006d8 <FsmForTrafficLight+0x58c>)
 80005f6:	601a      	str	r2, [r3, #0]
			if (timeForGreen_tmp + timeForYellow_tmp != timeForRed_tmp){
 80005f8:	4b37      	ldr	r3, [pc, #220]	; (80006d8 <FsmForTrafficLight+0x58c>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b35      	ldr	r3, [pc, #212]	; (80006d4 <FsmForTrafficLight+0x588>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	441a      	add	r2, r3
 8000602:	4b33      	ldr	r3, [pc, #204]	; (80006d0 <FsmForTrafficLight+0x584>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	429a      	cmp	r2, r3
 8000608:	d008      	beq.n	800061c <FsmForTrafficLight+0x4d0>
				status = ERROR_STATE;
 800060a:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <FsmForTrafficLight+0x57c>)
 800060c:	2214      	movs	r2, #20
 800060e:	601a      	str	r2, [r3, #0]
				setTimer(2000, 0);
 8000610:	2100      	movs	r1, #0
 8000612:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000616:	f000 fc05 	bl	8000e24 <setTimer>
 800061a:	e00b      	b.n	8000634 <FsmForTrafficLight+0x4e8>
			}else{
				timeForGreen = timeForGreen_tmp;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <FsmForTrafficLight+0x58c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a2a      	ldr	r2, [pc, #168]	; (80006cc <FsmForTrafficLight+0x580>)
 8000622:	6013      	str	r3, [r2, #0]
				timeForRed = timeForRed_tmp;
 8000624:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <FsmForTrafficLight+0x584>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a2c      	ldr	r2, [pc, #176]	; (80006dc <FsmForTrafficLight+0x590>)
 800062a:	6013      	str	r3, [r2, #0]
				timeForYellow = timeForYellow_tmp;
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <FsmForTrafficLight+0x588>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a2b      	ldr	r2, [pc, #172]	; (80006e0 <FsmForTrafficLight+0x594>)
 8000632:	6013      	str	r3, [r2, #0]
			}
		}
		if(timer_flag[0] == 1){
 8000634:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <FsmForTrafficLight+0x578>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d10d      	bne.n	8000658 <FsmForTrafficLight+0x50c>
			HAL_GPIO_TogglePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin);
 800063c:	2140      	movs	r1, #64	; 0x40
 800063e:	4820      	ldr	r0, [pc, #128]	; (80006c0 <FsmForTrafficLight+0x574>)
 8000640:	f001 f80b 	bl	800165a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin);
 8000644:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000648:	481d      	ldr	r0, [pc, #116]	; (80006c0 <FsmForTrafficLight+0x574>)
 800064a:	f001 f806 	bl	800165a <HAL_GPIO_TogglePin>
			setTimer(500, 0);
 800064e:	2100      	movs	r1, #0
 8000650:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000654:	f000 fbe6 	bl	8000e24 <setTimer>
		}
		if (isButtonPressed(0)){
 8000658:	2000      	movs	r0, #0
 800065a:	f000 f85d 	bl	8000718 <isButtonPressed>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d043      	beq.n	80006ec <FsmForTrafficLight+0x5a0>
			status = RED1_GREEN2;
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <FsmForTrafficLight+0x57c>)
 8000666:	2202      	movs	r2, #2
 8000668:	601a      	str	r2, [r3, #0]
			clearAllLight();
 800066a:	f000 f9eb 	bl	8000a44 <clearAllLight>
			setTimer(timeForGreen, 0);
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <FsmForTrafficLight+0x580>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fbd5 	bl	8000e24 <setTimer>
		}
		break;
 800067a:	e037      	b.n	80006ec <FsmForTrafficLight+0x5a0>
	case ERROR_STATE:
		turnOnAllLight();
 800067c:	f000 fa08 	bl	8000a90 <turnOnAllLight>
		if(timer_flag[0]){
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <FsmForTrafficLight+0x578>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d033      	beq.n	80006f0 <FsmForTrafficLight+0x5a4>
			status = RED1_GREEN2;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <FsmForTrafficLight+0x57c>)
 800068a:	2202      	movs	r2, #2
 800068c:	601a      	str	r2, [r3, #0]
			clearAllLight();
 800068e:	f000 f9d9 	bl	8000a44 <clearAllLight>
			setTimer(timeForGreen, 0);
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <FsmForTrafficLight+0x580>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fbc3 	bl	8000e24 <setTimer>
		}
		break;
 800069e:	e027      	b.n	80006f0 <FsmForTrafficLight+0x5a4>
	default:
		break;
 80006a0:	bf00      	nop
 80006a2:	e026      	b.n	80006f2 <FsmForTrafficLight+0x5a6>
		break;
 80006a4:	bf00      	nop
 80006a6:	e024      	b.n	80006f2 <FsmForTrafficLight+0x5a6>
		break;
 80006a8:	bf00      	nop
 80006aa:	e022      	b.n	80006f2 <FsmForTrafficLight+0x5a6>
		break;
 80006ac:	bf00      	nop
 80006ae:	e020      	b.n	80006f2 <FsmForTrafficLight+0x5a6>
		break;
 80006b0:	bf00      	nop
 80006b2:	e01e      	b.n	80006f2 <FsmForTrafficLight+0x5a6>
 80006b4:	200000c8 	.word	0x200000c8
 80006b8:	20000050 	.word	0x20000050
 80006bc:	2000004c 	.word	0x2000004c
 80006c0:	40010800 	.word	0x40010800
 80006c4:	200000bc 	.word	0x200000bc
 80006c8:	20000090 	.word	0x20000090
 80006cc:	20000000 	.word	0x20000000
 80006d0:	200000d4 	.word	0x200000d4
 80006d4:	200000dc 	.word	0x200000dc
 80006d8:	200000d8 	.word	0x200000d8
 80006dc:	20000008 	.word	0x20000008
 80006e0:	20000004 	.word	0x20000004
		break;
 80006e4:	bf00      	nop
 80006e6:	e004      	b.n	80006f2 <FsmForTrafficLight+0x5a6>
		break;
 80006e8:	bf00      	nop
 80006ea:	e002      	b.n	80006f2 <FsmForTrafficLight+0x5a6>
		break;
 80006ec:	bf00      	nop
 80006ee:	e000      	b.n	80006f2 <FsmForTrafficLight+0x5a6>
		break;
 80006f0:	bf00      	nop
	}
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop

080006f8 <subKeyProcess>:


int TimeOutForKeyPress =  200;
int button1_flag[N0_OF_BUTTONS] = {0};

void subKeyProcess(int index){
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	//TODO
	button1_flag[index] = 1;
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <subKeyProcess+0x1c>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2101      	movs	r1, #1
 8000706:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	20000094 	.word	0x20000094

08000718 <isButtonPressed>:
int isButtonPressed(int index){
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	if(button1_flag[index] == 1){
 8000720:	4a09      	ldr	r2, [pc, #36]	; (8000748 <isButtonPressed+0x30>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d106      	bne.n	800073a <isButtonPressed+0x22>
		button1_flag[index] = 0;
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <isButtonPressed+0x30>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2100      	movs	r1, #0
 8000732:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000736:	2301      	movs	r3, #1
 8000738:	e000      	b.n	800073c <isButtonPressed+0x24>
	}
	return 0;
 800073a:	2300      	movs	r3, #0
}
 800073c:	4618      	mov	r0, r3
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	20000094 	.word	0x20000094

0800074c <getKeyInput>:

void getKeyInput(){
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i ++){
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	e069      	b.n	800082c <getKeyInput+0xe0>
		KeyReg2[i] = KeyReg1[i];
 8000758:	4a38      	ldr	r2, [pc, #224]	; (800083c <getKeyInput+0xf0>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000760:	4937      	ldr	r1, [pc, #220]	; (8000840 <getKeyInput+0xf4>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000768:	4a36      	ldr	r2, [pc, #216]	; (8000844 <getKeyInput+0xf8>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000770:	4932      	ldr	r1, [pc, #200]	; (800083c <getKeyInput+0xf0>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Add your button here
		KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port, BUTTON_0_Pin<<i);
 8000778:	2202      	movs	r2, #2
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	b29b      	uxth	r3, r3
 8000782:	4619      	mov	r1, r3
 8000784:	4830      	ldr	r0, [pc, #192]	; (8000848 <getKeyInput+0xfc>)
 8000786:	f000 ff39 	bl	80015fc <HAL_GPIO_ReadPin>
 800078a:	4603      	mov	r3, r0
 800078c:	4619      	mov	r1, r3
 800078e:	4a2d      	ldr	r2, [pc, #180]	; (8000844 <getKeyInput+0xf8>)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000796:	4a29      	ldr	r2, [pc, #164]	; (800083c <getKeyInput+0xf0>)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800079e:	4929      	ldr	r1, [pc, #164]	; (8000844 <getKeyInput+0xf8>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d13d      	bne.n	8000826 <getKeyInput+0xda>
 80007aa:	4a24      	ldr	r2, [pc, #144]	; (800083c <getKeyInput+0xf0>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007b2:	4923      	ldr	r1, [pc, #140]	; (8000840 <getKeyInput+0xf4>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d133      	bne.n	8000826 <getKeyInput+0xda>
			if (KeyReg2[i] != KeyReg3[i]){
 80007be:	4a20      	ldr	r2, [pc, #128]	; (8000840 <getKeyInput+0xf4>)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007c6:	4921      	ldr	r1, [pc, #132]	; (800084c <getKeyInput+0x100>)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d014      	beq.n	80007fc <getKeyInput+0xb0>
			  KeyReg3[i] = KeyReg2[i];
 80007d2:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <getKeyInput+0xf4>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007da:	491c      	ldr	r1, [pc, #112]	; (800084c <getKeyInput+0x100>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			  if (KeyReg3[i] == PRESSED_STATE){
 80007e2:	4a1a      	ldr	r2, [pc, #104]	; (800084c <getKeyInput+0x100>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d11b      	bne.n	8000826 <getKeyInput+0xda>
				TimeOutForKeyPress = 200;
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <getKeyInput+0x104>)
 80007f0:	22c8      	movs	r2, #200	; 0xc8
 80007f2:	601a      	str	r2, [r3, #0]
				subKeyProcess(i);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff7f 	bl	80006f8 <subKeyProcess>
 80007fa:	e014      	b.n	8000826 <getKeyInput+0xda>
			  }
			}else{
			   TimeOutForKeyPress --;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <getKeyInput+0x104>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	3b01      	subs	r3, #1
 8000802:	4a13      	ldr	r2, [pc, #76]	; (8000850 <getKeyInput+0x104>)
 8000804:	6013      	str	r3, [r2, #0]
				if (TimeOutForKeyPress == 0){
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <getKeyInput+0x104>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d10b      	bne.n	8000826 <getKeyInput+0xda>
					TimeOutForKeyPress = 25;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <getKeyInput+0x104>)
 8000810:	2219      	movs	r2, #25
 8000812:	601a      	str	r2, [r3, #0]
					if(KeyReg3[i] == PRESSED_STATE){
 8000814:	4a0d      	ldr	r2, [pc, #52]	; (800084c <getKeyInput+0x100>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d102      	bne.n	8000826 <getKeyInput+0xda>
						subKeyProcess(i);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff69 	bl	80006f8 <subKeyProcess>
	for(int i = 0; i < 3; i ++){
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	3301      	adds	r3, #1
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b02      	cmp	r3, #2
 8000830:	dd92      	ble.n	8000758 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 8000832:	bf00      	nop
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000018 	.word	0x20000018
 8000840:	20000024 	.word	0x20000024
 8000844:	2000000c 	.word	0x2000000c
 8000848:	40010800 	.word	0x40010800
 800084c:	20000030 	.word	0x20000030
 8000850:	2000003c 	.word	0x2000003c

08000854 <display7SEG>:
 */
#include "display.h"
#include "main.h"
#include "global.h"
unsigned char NUM[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};
void display7SEG (int number){
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	GPIOB -> ODR = NUM[number];
 800085c:	4a05      	ldr	r2, [pc, #20]	; (8000874 <display7SEG+0x20>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	4b04      	ldr	r3, [pc, #16]	; (8000878 <display7SEG+0x24>)
 8000866:	60da      	str	r2, [r3, #12]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	20000040 	.word	0x20000040
 8000878:	40010c00 	.word	0x40010c00

0800087c <update7SEG>:
int value1 = 100;
int value2 = 100;
int index_led = 0;
int led_buffer [4] = {5,6,7,8};
 void update7SEG (int index){
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b03      	cmp	r3, #3
 8000888:	f200 8084 	bhi.w	8000994 <update7SEG+0x118>
 800088c:	a201      	add	r2, pc, #4	; (adr r2, 8000894 <update7SEG+0x18>)
 800088e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000892:	bf00      	nop
 8000894:	080008a5 	.word	0x080008a5
 8000898:	080008e1 	.word	0x080008e1
 800089c:	0800091d 	.word	0x0800091d
 80008a0:	08000959 	.word	0x08000959
	switch (index){
	case 0:
		// Display the first 7 SEG with led_buffer [0]

		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008aa:	483d      	ldr	r0, [pc, #244]	; (80009a0 <update7SEG+0x124>)
 80008ac:	f000 febd 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008b6:	483a      	ldr	r0, [pc, #232]	; (80009a0 <update7SEG+0x124>)
 80008b8:	f000 feb7 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c2:	4837      	ldr	r0, [pc, #220]	; (80009a0 <update7SEG+0x124>)
 80008c4:	f000 feb1 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ce:	4834      	ldr	r0, [pc, #208]	; (80009a0 <update7SEG+0x124>)
 80008d0:	f000 feab 	bl	800162a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 80008d4:	4b33      	ldr	r3, [pc, #204]	; (80009a4 <update7SEG+0x128>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ffbb 	bl	8000854 <display7SEG>
		break ;
 80008de:	e05a      	b.n	8000996 <update7SEG+0x11a>
	case 1:
		// Display the second 7 SEG with led_buffer [1]

		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e6:	482e      	ldr	r0, [pc, #184]	; (80009a0 <update7SEG+0x124>)
 80008e8:	f000 fe9f 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f2:	482b      	ldr	r0, [pc, #172]	; (80009a0 <update7SEG+0x124>)
 80008f4:	f000 fe99 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008fe:	4828      	ldr	r0, [pc, #160]	; (80009a0 <update7SEG+0x124>)
 8000900:	f000 fe93 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, SET);
 8000904:	2201      	movs	r2, #1
 8000906:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800090a:	4825      	ldr	r0, [pc, #148]	; (80009a0 <update7SEG+0x124>)
 800090c:	f000 fe8d 	bl	800162a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 8000910:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <update7SEG+0x128>)
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff9d 	bl	8000854 <display7SEG>
		break ;
 800091a:	e03c      	b.n	8000996 <update7SEG+0x11a>
	case 2:
		// Display the third 7 SEG with led_buffer [2]

		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, SET);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000922:	481f      	ldr	r0, [pc, #124]	; (80009a0 <update7SEG+0x124>)
 8000924:	f000 fe81 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800092e:	481c      	ldr	r0, [pc, #112]	; (80009a0 <update7SEG+0x124>)
 8000930:	f000 fe7b 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800093a:	4819      	ldr	r0, [pc, #100]	; (80009a0 <update7SEG+0x124>)
 800093c:	f000 fe75 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, SET);
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000946:	4816      	ldr	r0, [pc, #88]	; (80009a0 <update7SEG+0x124>)
 8000948:	f000 fe6f 	bl	800162a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <update7SEG+0x128>)
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff7f 	bl	8000854 <display7SEG>

		break ;
 8000956:	e01e      	b.n	8000996 <update7SEG+0x11a>
	case 3:
		// Display the forth 7 SEG with led_buffer [3]

		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, SET);
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800095e:	4810      	ldr	r0, [pc, #64]	; (80009a0 <update7SEG+0x124>)
 8000960:	f000 fe63 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, SET);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800096a:	480d      	ldr	r0, [pc, #52]	; (80009a0 <update7SEG+0x124>)
 800096c:	f000 fe5d 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, SET);
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000976:	480a      	ldr	r0, [pc, #40]	; (80009a0 <update7SEG+0x124>)
 8000978:	f000 fe57 	bl	800162a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000982:	4807      	ldr	r0, [pc, #28]	; (80009a0 <update7SEG+0x124>)
 8000984:	f000 fe51 	bl	800162a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <update7SEG+0x128>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff61 	bl	8000854 <display7SEG>
		break ;
 8000992:	e000      	b.n	8000996 <update7SEG+0x11a>
	default :
		break ;
 8000994:	bf00      	nop
	}
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40010800 	.word	0x40010800
 80009a4:	20000054 	.word	0x20000054

080009a8 <update7SegBuffer>:
void update7SegBuffer(){
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
//	value1 = timer_counter[0];
	led_buffer[0] = value1/1000;
 80009ac:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <update7SegBuffer+0x88>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a20      	ldr	r2, [pc, #128]	; (8000a34 <update7SegBuffer+0x8c>)
 80009b2:	fb82 1203 	smull	r1, r2, r2, r3
 80009b6:	1192      	asrs	r2, r2, #6
 80009b8:	17db      	asrs	r3, r3, #31
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <update7SegBuffer+0x90>)
 80009be:	6013      	str	r3, [r2, #0]
	led_buffer[1] = (value1%1000)/100;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <update7SegBuffer+0x88>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <update7SegBuffer+0x8c>)
 80009c6:	fb83 1302 	smull	r1, r3, r3, r2
 80009ca:	1199      	asrs	r1, r3, #6
 80009cc:	17d3      	asrs	r3, r2, #31
 80009ce:	1acb      	subs	r3, r1, r3
 80009d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009d4:	fb01 f303 	mul.w	r3, r1, r3
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	4a18      	ldr	r2, [pc, #96]	; (8000a3c <update7SegBuffer+0x94>)
 80009dc:	fb82 1203 	smull	r1, r2, r2, r3
 80009e0:	1152      	asrs	r2, r2, #5
 80009e2:	17db      	asrs	r3, r3, #31
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <update7SegBuffer+0x90>)
 80009e8:	6053      	str	r3, [r2, #4]
	led_buffer[2] = value2/1000;
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <update7SegBuffer+0x98>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a11      	ldr	r2, [pc, #68]	; (8000a34 <update7SegBuffer+0x8c>)
 80009f0:	fb82 1203 	smull	r1, r2, r2, r3
 80009f4:	1192      	asrs	r2, r2, #6
 80009f6:	17db      	asrs	r3, r3, #31
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <update7SegBuffer+0x90>)
 80009fc:	6093      	str	r3, [r2, #8]
	led_buffer[3] = (value2%1000)/100;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <update7SegBuffer+0x98>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <update7SegBuffer+0x8c>)
 8000a04:	fb83 1302 	smull	r1, r3, r3, r2
 8000a08:	1199      	asrs	r1, r3, #6
 8000a0a:	17d3      	asrs	r3, r2, #31
 8000a0c:	1acb      	subs	r3, r1, r3
 8000a0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a12:	fb01 f303 	mul.w	r3, r1, r3
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <update7SegBuffer+0x94>)
 8000a1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a1e:	1152      	asrs	r2, r2, #5
 8000a20:	17db      	asrs	r3, r3, #31
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <update7SegBuffer+0x90>)
 8000a26:	60d3      	str	r3, [r2, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	2000004c 	.word	0x2000004c
 8000a34:	10624dd3 	.word	0x10624dd3
 8000a38:	20000054 	.word	0x20000054
 8000a3c:	51eb851f 	.word	0x51eb851f
 8000a40:	20000050 	.word	0x20000050

08000a44 <clearAllLight>:
void clearAllLight(){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin, RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	480f      	ldr	r0, [pc, #60]	; (8000a8c <clearAllLight+0x48>)
 8000a4e:	f000 fdec 	bl	800162a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2120      	movs	r1, #32
 8000a56:	480d      	ldr	r0, [pc, #52]	; (8000a8c <clearAllLight+0x48>)
 8000a58:	f000 fde7 	bl	800162a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2140      	movs	r1, #64	; 0x40
 8000a60:	480a      	ldr	r0, [pc, #40]	; (8000a8c <clearAllLight+0x48>)
 8000a62:	f000 fde2 	bl	800162a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin, RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	4808      	ldr	r0, [pc, #32]	; (8000a8c <clearAllLight+0x48>)
 8000a6c:	f000 fddd 	bl	800162a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin, RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <clearAllLight+0x48>)
 8000a78:	f000 fdd7 	bl	800162a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a82:	4802      	ldr	r0, [pc, #8]	; (8000a8c <clearAllLight+0x48>)
 8000a84:	f000 fdd1 	bl	800162a <HAL_GPIO_WritePin>
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40010800 	.word	0x40010800

08000a90 <turnOnAllLight>:
void turnOnAllLight(){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin, SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2110      	movs	r1, #16
 8000a98:	480f      	ldr	r0, [pc, #60]	; (8000ad8 <turnOnAllLight+0x48>)
 8000a9a:	f000 fdc6 	bl	800162a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2120      	movs	r1, #32
 8000aa2:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <turnOnAllLight+0x48>)
 8000aa4:	f000 fdc1 	bl	800162a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2140      	movs	r1, #64	; 0x40
 8000aac:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <turnOnAllLight+0x48>)
 8000aae:	f000 fdbc 	bl	800162a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin, SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2180      	movs	r1, #128	; 0x80
 8000ab6:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <turnOnAllLight+0x48>)
 8000ab8:	f000 fdb7 	bl	800162a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin, SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <turnOnAllLight+0x48>)
 8000ac4:	f000 fdb1 	bl	800162a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ace:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <turnOnAllLight+0x48>)
 8000ad0:	f000 fdab 	bl	800162a <HAL_GPIO_WritePin>
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40010800 	.word	0x40010800

08000adc <button_reading>:
//we define a flag for a button pressed more than 1 second.
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
void button_reading(void){
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
	for(unsigned char i = 0; i < N0_OF_BUTTONS; i ++){
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	71fb      	strb	r3, [r7, #7]
 8000ae6:	e046      	b.n	8000b76 <button_reading+0x9a>
		debounceButtonBuffer2[i] =debounceButtonBuffer1[i];
 8000ae8:	79fa      	ldrb	r2, [r7, #7]
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	4926      	ldr	r1, [pc, #152]	; (8000b88 <button_reading+0xac>)
 8000aee:	5c89      	ldrb	r1, [r1, r2]
 8000af0:	4a26      	ldr	r2, [pc, #152]	; (8000b8c <button_reading+0xb0>)
 8000af2:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, i + 1);
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	3301      	adds	r3, #1
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	79fc      	ldrb	r4, [r7, #7]
 8000afe:	4619      	mov	r1, r3
 8000b00:	4823      	ldr	r0, [pc, #140]	; (8000b90 <button_reading+0xb4>)
 8000b02:	f000 fd7b 	bl	80015fc <HAL_GPIO_ReadPin>
 8000b06:	4603      	mov	r3, r0
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <button_reading+0xac>)
 8000b0c:	551a      	strb	r2, [r3, r4]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	4a1d      	ldr	r2, [pc, #116]	; (8000b88 <button_reading+0xac>)
 8000b12:	5cd2      	ldrb	r2, [r2, r3]
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	491d      	ldr	r1, [pc, #116]	; (8000b8c <button_reading+0xb0>)
 8000b18:	5ccb      	ldrb	r3, [r1, r3]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d128      	bne.n	8000b70 <button_reading+0x94>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	4919      	ldr	r1, [pc, #100]	; (8000b88 <button_reading+0xac>)
 8000b24:	5c89      	ldrb	r1, [r1, r2]
 8000b26:	4a1b      	ldr	r2, [pc, #108]	; (8000b94 <button_reading+0xb8>)
 8000b28:	54d1      	strb	r1, [r2, r3]
			if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <button_reading+0xb8>)
 8000b2e:	5cd3      	ldrb	r3, [r2, r3]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d114      	bne.n	8000b5e <button_reading+0x82>
			//if a button is pressed, we start counting
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	4a18      	ldr	r2, [pc, #96]	; (8000b98 <button_reading+0xbc>)
 8000b38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b3c:	2b63      	cmp	r3, #99	; 0x63
 8000b3e:	d809      	bhi.n	8000b54 <button_reading+0x78>
					counterForButtonPress1s[i]++;
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <button_reading+0xbc>)
 8000b44:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b48:	3201      	adds	r2, #1
 8000b4a:	b291      	uxth	r1, r2
 8000b4c:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <button_reading+0xbc>)
 8000b4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000b52:	e00d      	b.n	8000b70 <button_reading+0x94>
				} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
					flagForButtonPress1s[i] = 1;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	4a11      	ldr	r2, [pc, #68]	; (8000b9c <button_reading+0xc0>)
 8000b58:	2101      	movs	r1, #1
 8000b5a:	54d1      	strb	r1, [r2, r3]
 8000b5c:	e008      	b.n	8000b70 <button_reading+0x94>
					//todo
 				}
			} else {
				counterForButtonPress1s[i] = 0;
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <button_reading+0xbc>)
 8000b62:	2100      	movs	r1, #0
 8000b64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	4a0c      	ldr	r2, [pc, #48]	; (8000b9c <button_reading+0xc0>)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	54d1      	strb	r1, [r2, r3]
	for(unsigned char i = 0; i < N0_OF_BUTTONS; i ++){
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	3301      	adds	r3, #1
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d9b5      	bls.n	8000ae8 <button_reading+0xc>
			}
		}

	}
}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd90      	pop	{r4, r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000a8 	.word	0x200000a8
 8000b8c:	200000ac 	.word	0x200000ac
 8000b90:	40010800 	.word	0x40010800
 8000b94:	200000a4 	.word	0x200000a4
 8000b98:	200000b4 	.word	0x200000b4
 8000b9c:	200000b0 	.word	0x200000b0

08000ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba4:	f000 fa40 	bl	8001028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba8:	f000 f83c 	bl	8000c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bac:	f000 f8c2 	bl	8000d34 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bb0:	f000 f874 	bl	8000c9c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000bb4:	4815      	ldr	r0, [pc, #84]	; (8000c0c <main+0x6c>)
 8000bb6:	f001 f995 	bl	8001ee4 <HAL_TIM_Base_Start_IT>

  setTimer (50, 1);
 8000bba:	2101      	movs	r1, #1
 8000bbc:	2032      	movs	r0, #50	; 0x32
 8000bbe:	f000 f931 	bl	8000e24 <setTimer>
  value1 = 200;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <main+0x70>)
 8000bc4:	22c8      	movs	r2, #200	; 0xc8
 8000bc6:	601a      	str	r2, [r3, #0]
  value2 = 200;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <main+0x74>)
 8000bca:	22c8      	movs	r2, #200	; 0xc8
 8000bcc:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <main+0x78>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  update7SegBuffer();
 8000bd4:	f7ff fee8 	bl	80009a8 <update7SegBuffer>
	  FsmForTrafficLight();
 8000bd8:	f7ff fab8 	bl	800014c <FsmForTrafficLight>
	  if(timer_flag[1] == 1){
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <main+0x7c>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d1f7      	bne.n	8000bd4 <main+0x34>
		  if (index_led > 3){
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <main+0x80>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	dd02      	ble.n	8000bf2 <main+0x52>
			index_led = 0;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <main+0x80>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
		  }update7SEG(index_led++);
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <main+0x80>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	4909      	ldr	r1, [pc, #36]	; (8000c20 <main+0x80>)
 8000bfa:	600a      	str	r2, [r1, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fe3d 	bl	800087c <update7SEG>
		  setTimer(50, 1);
 8000c02:	2101      	movs	r1, #1
 8000c04:	2032      	movs	r0, #50	; 0x32
 8000c06:	f000 f90d 	bl	8000e24 <setTimer>
	  update7SegBuffer();
 8000c0a:	e7e3      	b.n	8000bd4 <main+0x34>
 8000c0c:	200000e0 	.word	0x200000e0
 8000c10:	2000004c 	.word	0x2000004c
 8000c14:	20000050 	.word	0x20000050
 8000c18:	20000090 	.word	0x20000090
 8000c1c:	200000bc 	.word	0x200000bc
 8000c20:	200000a0 	.word	0x200000a0

08000c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b090      	sub	sp, #64	; 0x40
 8000c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 0318 	add.w	r3, r7, #24
 8000c2e:	2228      	movs	r2, #40	; 0x28
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 fd12 	bl	800265c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c4e:	2310      	movs	r3, #16
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c56:	f107 0318 	add.w	r3, r7, #24
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 fd16 	bl	800168c <HAL_RCC_OscConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c66:	f000 f8d8 	bl	8000e1a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 ff82 	bl	8001b8c <HAL_RCC_ClockConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c8e:	f000 f8c4 	bl	8000e1a <Error_Handler>
  }
}
 8000c92:	bf00      	nop
 8000c94:	3740      	adds	r7, #64	; 0x40
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <MX_TIM2_Init+0x94>)
 8000cba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <MX_TIM2_Init+0x94>)
 8000cc2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000cc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc8:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <MX_TIM2_Init+0x94>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <MX_TIM2_Init+0x94>)
 8000cd0:	2209      	movs	r2, #9
 8000cd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <MX_TIM2_Init+0x94>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <MX_TIM2_Init+0x94>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ce0:	4813      	ldr	r0, [pc, #76]	; (8000d30 <MX_TIM2_Init+0x94>)
 8000ce2:	f001 f8af 	bl	8001e44 <HAL_TIM_Base_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cec:	f000 f895 	bl	8000e1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480c      	ldr	r0, [pc, #48]	; (8000d30 <MX_TIM2_Init+0x94>)
 8000cfe:	f001 fa45 	bl	800218c <HAL_TIM_ConfigClockSource>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d08:	f000 f887 	bl	8000e1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d14:	463b      	mov	r3, r7
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_TIM2_Init+0x94>)
 8000d1a:	f001 fc11 	bl	8002540 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d24:	f000 f879 	bl	8000e1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	200000e0 	.word	0x200000e0

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <MX_GPIO_Init+0xb4>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a26      	ldr	r2, [pc, #152]	; (8000de8 <MX_GPIO_Init+0xb4>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <MX_GPIO_Init+0xb4>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d60:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <MX_GPIO_Init+0xb4>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a20      	ldr	r2, [pc, #128]	; (8000de8 <MX_GPIO_Init+0xb4>)
 8000d66:	f043 0308 	orr.w	r3, r3, #8
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <MX_GPIO_Init+0xb4>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0308 	and.w	r3, r3, #8
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LIGHT_1_Pin|YELLOW_LIGHT_1_Pin|GREEN_LIGHT_1_Pin|RED_LIGHT_2_Pin
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 8000d7e:	481b      	ldr	r0, [pc, #108]	; (8000dec <MX_GPIO_Init+0xb8>)
 8000d80:	f000 fc53 	bl	800162a <HAL_GPIO_WritePin>
                          |YELLOW_LIGHT_2_Pin|GREEN_LIGHT_2_Pin|EN_0_Pin|EN_1_Pin
                          |EN_2_Pin|EN_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8000d84:	2200      	movs	r2, #0
 8000d86:	217f      	movs	r1, #127	; 0x7f
 8000d88:	4819      	ldr	r0, [pc, #100]	; (8000df0 <MX_GPIO_Init+0xbc>)
 8000d8a:	f000 fc4e 	bl	800162a <HAL_GPIO_WritePin>
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8000d8e:	230e      	movs	r3, #14
 8000d90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	f107 0308 	add.w	r3, r7, #8
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4812      	ldr	r0, [pc, #72]	; (8000dec <MX_GPIO_Init+0xb8>)
 8000da2:	f000 fab1 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LIGHT_1_Pin YELLOW_LIGHT_1_Pin GREEN_LIGHT_1_Pin RED_LIGHT_2_Pin
                           YELLOW_LIGHT_2_Pin GREEN_LIGHT_2_Pin EN_0_Pin EN_1_Pin
                           EN_2_Pin EN_3_Pin */
  GPIO_InitStruct.Pin = RED_LIGHT_1_Pin|YELLOW_LIGHT_1_Pin|GREEN_LIGHT_1_Pin|RED_LIGHT_2_Pin
 8000da6:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8000daa:	60bb      	str	r3, [r7, #8]
                          |YELLOW_LIGHT_2_Pin|GREEN_LIGHT_2_Pin|EN_0_Pin|EN_1_Pin
                          |EN_2_Pin|EN_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2302      	movs	r3, #2
 8000db6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480b      	ldr	r0, [pc, #44]	; (8000dec <MX_GPIO_Init+0xb8>)
 8000dc0:	f000 faa2 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8000dc4:	237f      	movs	r3, #127	; 0x7f
 8000dc6:	60bb      	str	r3, [r7, #8]
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_GPIO_Init+0xbc>)
 8000ddc:	f000 fa94 	bl	8001308 <HAL_GPIO_Init>

}
 8000de0:	bf00      	nop
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010800 	.word	0x40010800
 8000df0:	40010c00 	.word	0x40010c00

08000df4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e04:	d105      	bne.n	8000e12 <HAL_TIM_PeriodElapsedCallback+0x1e>
		button_reading();
 8000e06:	f7ff fe69 	bl	8000adc <button_reading>
		timer_run();
 8000e0a:	f000 f829 	bl	8000e60 <timer_run>
		getKeyInput();
 8000e0e:	f7ff fc9d 	bl	800074c <getKeyInput>
	}
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1e:	b672      	cpsid	i
}
 8000e20:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <Error_Handler+0x8>

08000e24 <setTimer>:
#include "software_timer.h"
#include "global.h"
int TIMER_CYCLE = 10;
int timer_flag[No_timers] = {};
int timer_counter[No_timers] ={};
void setTimer (int duration, int index){
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIMER_CYCLE;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <setTimer+0x30>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	fb92 f2f3 	sdiv	r2, r2, r3
 8000e38:	4907      	ldr	r1, [pc, #28]	; (8000e58 <setTimer+0x34>)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000e40:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <setTimer+0x38>)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	2100      	movs	r1, #0
 8000e46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	20000064 	.word	0x20000064
 8000e58:	200000c8 	.word	0x200000c8
 8000e5c:	200000bc 	.word	0x200000bc

08000e60 <timer_run>:
void timer_run (){
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
	for(int i = 0;i < No_timers; i++){
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	e01c      	b.n	8000ea6 <timer_run+0x46>
		if( timer_counter[i] > 0){
 8000e6c:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <timer_run+0x58>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	dd13      	ble.n	8000ea0 <timer_run+0x40>
			timer_counter[i] --;
 8000e78:	4a0f      	ldr	r2, [pc, #60]	; (8000eb8 <timer_run+0x58>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e80:	1e5a      	subs	r2, r3, #1
 8000e82:	490d      	ldr	r1, [pc, #52]	; (8000eb8 <timer_run+0x58>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if( timer_counter[i] == 0) timer_flag[i] = 1;
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <timer_run+0x58>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d104      	bne.n	8000ea0 <timer_run+0x40>
 8000e96:	4a09      	ldr	r2, [pc, #36]	; (8000ebc <timer_run+0x5c>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0;i < No_timers; i++){
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	dddf      	ble.n	8000e6c <timer_run+0xc>
		}
	}

}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	200000c8 	.word	0x200000c8
 8000ebc:	200000bc 	.word	0x200000bc

08000ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <HAL_MspInit+0x5c>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <HAL_MspInit+0x5c>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6193      	str	r3, [r2, #24]
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_MspInit+0x5c>)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_MspInit+0x5c>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <HAL_MspInit+0x5c>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	61d3      	str	r3, [r2, #28]
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_MspInit+0x5c>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_MspInit+0x60>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_MspInit+0x60>)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40010000 	.word	0x40010000

08000f24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f34:	d113      	bne.n	8000f5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_TIM_Base_MspInit+0x44>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <HAL_TIM_Base_MspInit+0x44>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	61d3      	str	r3, [r2, #28]
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_TIM_Base_MspInit+0x44>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	201c      	movs	r0, #28
 8000f54:	f000 f9a1 	bl	800129a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f58:	201c      	movs	r0, #28
 8000f5a:	f000 f9ba 	bl	80012d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <NMI_Handler+0x4>

08000f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <MemManage_Handler+0x4>

08000f7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr

08000fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb2:	f000 f87f 	bl	80010b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <TIM2_IRQHandler+0x10>)
 8000fc2:	f000 ffdb 	bl	8001f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200000e0 	.word	0x200000e0

08000fd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fdc:	f7ff fff8 	bl	8000fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe0:	480b      	ldr	r0, [pc, #44]	; (8001010 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fe2:	490c      	ldr	r1, [pc, #48]	; (8001014 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fe4:	4a0c      	ldr	r2, [pc, #48]	; (8001018 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe8:	e002      	b.n	8000ff0 <LoopCopyDataInit>

08000fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fee:	3304      	adds	r3, #4

08000ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff4:	d3f9      	bcc.n	8000fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff6:	4a09      	ldr	r2, [pc, #36]	; (800101c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ff8:	4c09      	ldr	r4, [pc, #36]	; (8001020 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ffc:	e001      	b.n	8001002 <LoopFillZerobss>

08000ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001000:	3204      	adds	r2, #4

08001002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001004:	d3fb      	bcc.n	8000ffe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001006:	f001 fb05 	bl	8002614 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800100a:	f7ff fdc9 	bl	8000ba0 <main>
  bx lr
 800100e:	4770      	bx	lr
  ldr r0, =_sdata
 8001010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001014:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001018:	080026b0 	.word	0x080026b0
  ldr r2, =_sbss
 800101c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001020:	2000012c 	.word	0x2000012c

08001024 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC1_2_IRQHandler>
	...

08001028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_Init+0x28>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <HAL_Init+0x28>)
 8001032:	f043 0310 	orr.w	r3, r3, #16
 8001036:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001038:	2003      	movs	r0, #3
 800103a:	f000 f923 	bl	8001284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103e:	200f      	movs	r0, #15
 8001040:	f000 f808 	bl	8001054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001044:	f7ff ff3c 	bl	8000ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40022000 	.word	0x40022000

08001054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x54>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_InitTick+0x58>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	fbb3 f3f1 	udiv	r3, r3, r1
 800106e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f93b 	bl	80012ee <HAL_SYSTICK_Config>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e00e      	b.n	80010a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b0f      	cmp	r3, #15
 8001086:	d80a      	bhi.n	800109e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001088:	2200      	movs	r2, #0
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	f04f 30ff 	mov.w	r0, #4294967295
 8001090:	f000 f903 	bl	800129a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001094:	4a06      	ldr	r2, [pc, #24]	; (80010b0 <HAL_InitTick+0x5c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e000      	b.n	80010a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000068 	.word	0x20000068
 80010ac:	20000070 	.word	0x20000070
 80010b0:	2000006c 	.word	0x2000006c

080010b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <HAL_IncTick+0x1c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_IncTick+0x20>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a03      	ldr	r2, [pc, #12]	; (80010d4 <HAL_IncTick+0x20>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	20000070 	.word	0x20000070
 80010d4:	20000128 	.word	0x20000128

080010d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b02      	ldr	r3, [pc, #8]	; (80010e8 <HAL_GetTick+0x10>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	20000128 	.word	0x20000128

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 021f 	and.w	r2, r3, #31
 8001168:	4906      	ldr	r1, [pc, #24]	; (8001184 <__NVIC_EnableIRQ+0x34>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	e000e100 	.word	0xe000e100

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	; (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	; (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001250:	d301      	bcc.n	8001256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001252:	2301      	movs	r3, #1
 8001254:	e00f      	b.n	8001276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <SysTick_Config+0x40>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125e:	210f      	movs	r1, #15
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f7ff ff90 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <SysTick_Config+0x40>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <SysTick_Config+0x40>)
 8001270:	2207      	movs	r2, #7
 8001272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	e000e010 	.word	0xe000e010

08001284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff2d 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ac:	f7ff ff42 	bl	8001134 <__NVIC_GetPriorityGrouping>
 80012b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff ff90 	bl	80011dc <NVIC_EncodePriority>
 80012bc:	4602      	mov	r2, r0
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff5f 	bl	8001188 <__NVIC_SetPriority>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff35 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffa2 	bl	8001240 <SysTick_Config>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001308:	b480      	push	{r7}
 800130a:	b08b      	sub	sp, #44	; 0x2c
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131a:	e148      	b.n	80015ae <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800131c:	2201      	movs	r2, #1
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	69fa      	ldr	r2, [r7, #28]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	429a      	cmp	r2, r3
 8001336:	f040 8137 	bne.w	80015a8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4aa3      	ldr	r2, [pc, #652]	; (80015cc <HAL_GPIO_Init+0x2c4>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d05e      	beq.n	8001402 <HAL_GPIO_Init+0xfa>
 8001344:	4aa1      	ldr	r2, [pc, #644]	; (80015cc <HAL_GPIO_Init+0x2c4>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d875      	bhi.n	8001436 <HAL_GPIO_Init+0x12e>
 800134a:	4aa1      	ldr	r2, [pc, #644]	; (80015d0 <HAL_GPIO_Init+0x2c8>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d058      	beq.n	8001402 <HAL_GPIO_Init+0xfa>
 8001350:	4a9f      	ldr	r2, [pc, #636]	; (80015d0 <HAL_GPIO_Init+0x2c8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d86f      	bhi.n	8001436 <HAL_GPIO_Init+0x12e>
 8001356:	4a9f      	ldr	r2, [pc, #636]	; (80015d4 <HAL_GPIO_Init+0x2cc>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d052      	beq.n	8001402 <HAL_GPIO_Init+0xfa>
 800135c:	4a9d      	ldr	r2, [pc, #628]	; (80015d4 <HAL_GPIO_Init+0x2cc>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d869      	bhi.n	8001436 <HAL_GPIO_Init+0x12e>
 8001362:	4a9d      	ldr	r2, [pc, #628]	; (80015d8 <HAL_GPIO_Init+0x2d0>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d04c      	beq.n	8001402 <HAL_GPIO_Init+0xfa>
 8001368:	4a9b      	ldr	r2, [pc, #620]	; (80015d8 <HAL_GPIO_Init+0x2d0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d863      	bhi.n	8001436 <HAL_GPIO_Init+0x12e>
 800136e:	4a9b      	ldr	r2, [pc, #620]	; (80015dc <HAL_GPIO_Init+0x2d4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d046      	beq.n	8001402 <HAL_GPIO_Init+0xfa>
 8001374:	4a99      	ldr	r2, [pc, #612]	; (80015dc <HAL_GPIO_Init+0x2d4>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d85d      	bhi.n	8001436 <HAL_GPIO_Init+0x12e>
 800137a:	2b12      	cmp	r3, #18
 800137c:	d82a      	bhi.n	80013d4 <HAL_GPIO_Init+0xcc>
 800137e:	2b12      	cmp	r3, #18
 8001380:	d859      	bhi.n	8001436 <HAL_GPIO_Init+0x12e>
 8001382:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <HAL_GPIO_Init+0x80>)
 8001384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001388:	08001403 	.word	0x08001403
 800138c:	080013dd 	.word	0x080013dd
 8001390:	080013ef 	.word	0x080013ef
 8001394:	08001431 	.word	0x08001431
 8001398:	08001437 	.word	0x08001437
 800139c:	08001437 	.word	0x08001437
 80013a0:	08001437 	.word	0x08001437
 80013a4:	08001437 	.word	0x08001437
 80013a8:	08001437 	.word	0x08001437
 80013ac:	08001437 	.word	0x08001437
 80013b0:	08001437 	.word	0x08001437
 80013b4:	08001437 	.word	0x08001437
 80013b8:	08001437 	.word	0x08001437
 80013bc:	08001437 	.word	0x08001437
 80013c0:	08001437 	.word	0x08001437
 80013c4:	08001437 	.word	0x08001437
 80013c8:	08001437 	.word	0x08001437
 80013cc:	080013e5 	.word	0x080013e5
 80013d0:	080013f9 	.word	0x080013f9
 80013d4:	4a82      	ldr	r2, [pc, #520]	; (80015e0 <HAL_GPIO_Init+0x2d8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d013      	beq.n	8001402 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013da:	e02c      	b.n	8001436 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	623b      	str	r3, [r7, #32]
          break;
 80013e2:	e029      	b.n	8001438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	3304      	adds	r3, #4
 80013ea:	623b      	str	r3, [r7, #32]
          break;
 80013ec:	e024      	b.n	8001438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	3308      	adds	r3, #8
 80013f4:	623b      	str	r3, [r7, #32]
          break;
 80013f6:	e01f      	b.n	8001438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	330c      	adds	r3, #12
 80013fe:	623b      	str	r3, [r7, #32]
          break;
 8001400:	e01a      	b.n	8001438 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d102      	bne.n	8001410 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800140a:	2304      	movs	r3, #4
 800140c:	623b      	str	r3, [r7, #32]
          break;
 800140e:	e013      	b.n	8001438 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d105      	bne.n	8001424 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001418:	2308      	movs	r3, #8
 800141a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69fa      	ldr	r2, [r7, #28]
 8001420:	611a      	str	r2, [r3, #16]
          break;
 8001422:	e009      	b.n	8001438 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001424:	2308      	movs	r3, #8
 8001426:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69fa      	ldr	r2, [r7, #28]
 800142c:	615a      	str	r2, [r3, #20]
          break;
 800142e:	e003      	b.n	8001438 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
          break;
 8001434:	e000      	b.n	8001438 <HAL_GPIO_Init+0x130>
          break;
 8001436:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2bff      	cmp	r3, #255	; 0xff
 800143c:	d801      	bhi.n	8001442 <HAL_GPIO_Init+0x13a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	e001      	b.n	8001446 <HAL_GPIO_Init+0x13e>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3304      	adds	r3, #4
 8001446:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2bff      	cmp	r3, #255	; 0xff
 800144c:	d802      	bhi.n	8001454 <HAL_GPIO_Init+0x14c>
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	e002      	b.n	800145a <HAL_GPIO_Init+0x152>
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	3b08      	subs	r3, #8
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	210f      	movs	r1, #15
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	fa01 f303 	lsl.w	r3, r1, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	401a      	ands	r2, r3
 800146c:	6a39      	ldr	r1, [r7, #32]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	fa01 f303 	lsl.w	r3, r1, r3
 8001474:	431a      	orrs	r2, r3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8090 	beq.w	80015a8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001488:	4b56      	ldr	r3, [pc, #344]	; (80015e4 <HAL_GPIO_Init+0x2dc>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a55      	ldr	r2, [pc, #340]	; (80015e4 <HAL_GPIO_Init+0x2dc>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b53      	ldr	r3, [pc, #332]	; (80015e4 <HAL_GPIO_Init+0x2dc>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014a0:	4a51      	ldr	r2, [pc, #324]	; (80015e8 <HAL_GPIO_Init+0x2e0>)
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	089b      	lsrs	r3, r3, #2
 80014a6:	3302      	adds	r3, #2
 80014a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	220f      	movs	r2, #15
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4013      	ands	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a49      	ldr	r2, [pc, #292]	; (80015ec <HAL_GPIO_Init+0x2e4>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d00d      	beq.n	80014e8 <HAL_GPIO_Init+0x1e0>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a48      	ldr	r2, [pc, #288]	; (80015f0 <HAL_GPIO_Init+0x2e8>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d007      	beq.n	80014e4 <HAL_GPIO_Init+0x1dc>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a47      	ldr	r2, [pc, #284]	; (80015f4 <HAL_GPIO_Init+0x2ec>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d101      	bne.n	80014e0 <HAL_GPIO_Init+0x1d8>
 80014dc:	2302      	movs	r3, #2
 80014de:	e004      	b.n	80014ea <HAL_GPIO_Init+0x1e2>
 80014e0:	2303      	movs	r3, #3
 80014e2:	e002      	b.n	80014ea <HAL_GPIO_Init+0x1e2>
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <HAL_GPIO_Init+0x1e2>
 80014e8:	2300      	movs	r3, #0
 80014ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ec:	f002 0203 	and.w	r2, r2, #3
 80014f0:	0092      	lsls	r2, r2, #2
 80014f2:	4093      	lsls	r3, r2
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014fa:	493b      	ldr	r1, [pc, #236]	; (80015e8 <HAL_GPIO_Init+0x2e0>)
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3302      	adds	r3, #2
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d006      	beq.n	8001522 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001514:	4b38      	ldr	r3, [pc, #224]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	4937      	ldr	r1, [pc, #220]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	608b      	str	r3, [r1, #8]
 8001520:	e006      	b.n	8001530 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001522:	4b35      	ldr	r3, [pc, #212]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	43db      	mvns	r3, r3
 800152a:	4933      	ldr	r1, [pc, #204]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 800152c:	4013      	ands	r3, r2
 800152e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800153c:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	492d      	ldr	r1, [pc, #180]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	60cb      	str	r3, [r1, #12]
 8001548:	e006      	b.n	8001558 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800154a:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	43db      	mvns	r3, r3
 8001552:	4929      	ldr	r1, [pc, #164]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 8001554:	4013      	ands	r3, r2
 8001556:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001564:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	4923      	ldr	r1, [pc, #140]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
 8001570:	e006      	b.n	8001580 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	43db      	mvns	r3, r3
 800157a:	491f      	ldr	r1, [pc, #124]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 800157c:	4013      	ands	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d006      	beq.n	800159a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4919      	ldr	r1, [pc, #100]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	4313      	orrs	r3, r2
 8001596:	600b      	str	r3, [r1, #0]
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	4915      	ldr	r1, [pc, #84]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	3301      	adds	r3, #1
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	fa22 f303 	lsr.w	r3, r2, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f47f aeaf 	bne.w	800131c <HAL_GPIO_Init+0x14>
  }
}
 80015be:	bf00      	nop
 80015c0:	bf00      	nop
 80015c2:	372c      	adds	r7, #44	; 0x2c
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	10320000 	.word	0x10320000
 80015d0:	10310000 	.word	0x10310000
 80015d4:	10220000 	.word	0x10220000
 80015d8:	10210000 	.word	0x10210000
 80015dc:	10120000 	.word	0x10120000
 80015e0:	10110000 	.word	0x10110000
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40010000 	.word	0x40010000
 80015ec:	40010800 	.word	0x40010800
 80015f0:	40010c00 	.word	0x40010c00
 80015f4:	40011000 	.word	0x40011000
 80015f8:	40010400 	.word	0x40010400

080015fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	887b      	ldrh	r3, [r7, #2]
 800160e:	4013      	ands	r3, r2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d002      	beq.n	800161a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e001      	b.n	800161e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800161e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	460b      	mov	r3, r1
 8001634:	807b      	strh	r3, [r7, #2]
 8001636:	4613      	mov	r3, r2
 8001638:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800163a:	787b      	ldrb	r3, [r7, #1]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001640:	887a      	ldrh	r2, [r7, #2]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001646:	e003      	b.n	8001650 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001648:	887b      	ldrh	r3, [r7, #2]
 800164a:	041a      	lsls	r2, r3, #16
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	611a      	str	r2, [r3, #16]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr

0800165a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800165a:	b480      	push	{r7}
 800165c:	b085      	sub	sp, #20
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	460b      	mov	r3, r1
 8001664:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800166c:	887a      	ldrh	r2, [r7, #2]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4013      	ands	r3, r2
 8001672:	041a      	lsls	r2, r3, #16
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43d9      	mvns	r1, r3
 8001678:	887b      	ldrh	r3, [r7, #2]
 800167a:	400b      	ands	r3, r1
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	611a      	str	r2, [r3, #16]
}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e26c      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 8087 	beq.w	80017ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016ac:	4b92      	ldr	r3, [pc, #584]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d00c      	beq.n	80016d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016b8:	4b8f      	ldr	r3, [pc, #572]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 030c 	and.w	r3, r3, #12
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d112      	bne.n	80016ea <HAL_RCC_OscConfig+0x5e>
 80016c4:	4b8c      	ldr	r3, [pc, #560]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d0:	d10b      	bne.n	80016ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d2:	4b89      	ldr	r3, [pc, #548]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d06c      	beq.n	80017b8 <HAL_RCC_OscConfig+0x12c>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d168      	bne.n	80017b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e246      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f2:	d106      	bne.n	8001702 <HAL_RCC_OscConfig+0x76>
 80016f4:	4b80      	ldr	r3, [pc, #512]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a7f      	ldr	r2, [pc, #508]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80016fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	e02e      	b.n	8001760 <HAL_RCC_OscConfig+0xd4>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10c      	bne.n	8001724 <HAL_RCC_OscConfig+0x98>
 800170a:	4b7b      	ldr	r3, [pc, #492]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a7a      	ldr	r2, [pc, #488]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	4b78      	ldr	r3, [pc, #480]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a77      	ldr	r2, [pc, #476]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 800171c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	e01d      	b.n	8001760 <HAL_RCC_OscConfig+0xd4>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800172c:	d10c      	bne.n	8001748 <HAL_RCC_OscConfig+0xbc>
 800172e:	4b72      	ldr	r3, [pc, #456]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a71      	ldr	r2, [pc, #452]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	4b6f      	ldr	r3, [pc, #444]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a6e      	ldr	r2, [pc, #440]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e00b      	b.n	8001760 <HAL_RCC_OscConfig+0xd4>
 8001748:	4b6b      	ldr	r3, [pc, #428]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a6a      	ldr	r2, [pc, #424]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 800174e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4b68      	ldr	r3, [pc, #416]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a67      	ldr	r2, [pc, #412]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 800175a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800175e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d013      	beq.n	8001790 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fcb6 	bl	80010d8 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001770:	f7ff fcb2 	bl	80010d8 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b64      	cmp	r3, #100	; 0x64
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e1fa      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	4b5d      	ldr	r3, [pc, #372]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0xe4>
 800178e:	e014      	b.n	80017ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff fca2 	bl	80010d8 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001798:	f7ff fc9e 	bl	80010d8 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	; 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e1e6      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	4b53      	ldr	r3, [pc, #332]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x10c>
 80017b6:	e000      	b.n	80017ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d063      	beq.n	800188e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017c6:	4b4c      	ldr	r3, [pc, #304]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00b      	beq.n	80017ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017d2:	4b49      	ldr	r3, [pc, #292]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d11c      	bne.n	8001818 <HAL_RCC_OscConfig+0x18c>
 80017de:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d116      	bne.n	8001818 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ea:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d005      	beq.n	8001802 <HAL_RCC_OscConfig+0x176>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d001      	beq.n	8001802 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e1ba      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001802:	4b3d      	ldr	r3, [pc, #244]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	4939      	ldr	r1, [pc, #228]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001812:	4313      	orrs	r3, r2
 8001814:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001816:	e03a      	b.n	800188e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d020      	beq.n	8001862 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001820:	4b36      	ldr	r3, [pc, #216]	; (80018fc <HAL_RCC_OscConfig+0x270>)
 8001822:	2201      	movs	r2, #1
 8001824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001826:	f7ff fc57 	bl	80010d8 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182e:	f7ff fc53 	bl	80010d8 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e19b      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001840:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184c:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4927      	ldr	r1, [pc, #156]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]
 8001860:	e015      	b.n	800188e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001862:	4b26      	ldr	r3, [pc, #152]	; (80018fc <HAL_RCC_OscConfig+0x270>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fc36 	bl	80010d8 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001870:	f7ff fc32 	bl	80010d8 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e17a      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d03a      	beq.n	8001910 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d019      	beq.n	80018d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a8:	f7ff fc16 	bl	80010d8 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b0:	f7ff fc12 	bl	80010d8 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e15a      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018ce:	2001      	movs	r0, #1
 80018d0:	f000 fa9a 	bl	8001e08 <RCC_Delay>
 80018d4:	e01c      	b.n	8001910 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018dc:	f7ff fbfc 	bl	80010d8 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e2:	e00f      	b.n	8001904 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e4:	f7ff fbf8 	bl	80010d8 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d908      	bls.n	8001904 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e140      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
 80018f6:	bf00      	nop
 80018f8:	40021000 	.word	0x40021000
 80018fc:	42420000 	.word	0x42420000
 8001900:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001904:	4b9e      	ldr	r3, [pc, #632]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1e9      	bne.n	80018e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80a6 	beq.w	8001a6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001922:	4b97      	ldr	r3, [pc, #604]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10d      	bne.n	800194a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	4b94      	ldr	r3, [pc, #592]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	4a93      	ldr	r2, [pc, #588]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001938:	61d3      	str	r3, [r2, #28]
 800193a:	4b91      	ldr	r3, [pc, #580]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001946:	2301      	movs	r3, #1
 8001948:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194a:	4b8e      	ldr	r3, [pc, #568]	; (8001b84 <HAL_RCC_OscConfig+0x4f8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	2b00      	cmp	r3, #0
 8001954:	d118      	bne.n	8001988 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001956:	4b8b      	ldr	r3, [pc, #556]	; (8001b84 <HAL_RCC_OscConfig+0x4f8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a8a      	ldr	r2, [pc, #552]	; (8001b84 <HAL_RCC_OscConfig+0x4f8>)
 800195c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001962:	f7ff fbb9 	bl	80010d8 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196a:	f7ff fbb5 	bl	80010d8 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b64      	cmp	r3, #100	; 0x64
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e0fd      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197c:	4b81      	ldr	r3, [pc, #516]	; (8001b84 <HAL_RCC_OscConfig+0x4f8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0f0      	beq.n	800196a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d106      	bne.n	800199e <HAL_RCC_OscConfig+0x312>
 8001990:	4b7b      	ldr	r3, [pc, #492]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	4a7a      	ldr	r2, [pc, #488]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6213      	str	r3, [r2, #32]
 800199c:	e02d      	b.n	80019fa <HAL_RCC_OscConfig+0x36e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x334>
 80019a6:	4b76      	ldr	r3, [pc, #472]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4a75      	ldr	r2, [pc, #468]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	6213      	str	r3, [r2, #32]
 80019b2:	4b73      	ldr	r3, [pc, #460]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	4a72      	ldr	r2, [pc, #456]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019b8:	f023 0304 	bic.w	r3, r3, #4
 80019bc:	6213      	str	r3, [r2, #32]
 80019be:	e01c      	b.n	80019fa <HAL_RCC_OscConfig+0x36e>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b05      	cmp	r3, #5
 80019c6:	d10c      	bne.n	80019e2 <HAL_RCC_OscConfig+0x356>
 80019c8:	4b6d      	ldr	r3, [pc, #436]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	4a6c      	ldr	r2, [pc, #432]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	f043 0304 	orr.w	r3, r3, #4
 80019d2:	6213      	str	r3, [r2, #32]
 80019d4:	4b6a      	ldr	r3, [pc, #424]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4a69      	ldr	r2, [pc, #420]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6213      	str	r3, [r2, #32]
 80019e0:	e00b      	b.n	80019fa <HAL_RCC_OscConfig+0x36e>
 80019e2:	4b67      	ldr	r3, [pc, #412]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	4a66      	ldr	r2, [pc, #408]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	f023 0301 	bic.w	r3, r3, #1
 80019ec:	6213      	str	r3, [r2, #32]
 80019ee:	4b64      	ldr	r3, [pc, #400]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	4a63      	ldr	r2, [pc, #396]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	f023 0304 	bic.w	r3, r3, #4
 80019f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d015      	beq.n	8001a2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a02:	f7ff fb69 	bl	80010d8 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a08:	e00a      	b.n	8001a20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0a:	f7ff fb65 	bl	80010d8 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e0ab      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a20:	4b57      	ldr	r3, [pc, #348]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0ee      	beq.n	8001a0a <HAL_RCC_OscConfig+0x37e>
 8001a2c:	e014      	b.n	8001a58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff fb53 	bl	80010d8 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7ff fb4f 	bl	80010d8 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e095      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a4c:	4b4c      	ldr	r3, [pc, #304]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1ee      	bne.n	8001a36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d105      	bne.n	8001a6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a5e:	4b48      	ldr	r3, [pc, #288]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	4a47      	ldr	r2, [pc, #284]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 8081 	beq.w	8001b76 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a74:	4b42      	ldr	r3, [pc, #264]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d061      	beq.n	8001b44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d146      	bne.n	8001b16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a88:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <HAL_RCC_OscConfig+0x4fc>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fb23 	bl	80010d8 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff fb1f 	bl	80010d8 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e067      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa8:	4b35      	ldr	r3, [pc, #212]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f0      	bne.n	8001a96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001abc:	d108      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001abe:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	492d      	ldr	r1, [pc, #180]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a19      	ldr	r1, [r3, #32]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	430b      	orrs	r3, r1
 8001ae2:	4927      	ldr	r1, [pc, #156]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae8:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <HAL_RCC_OscConfig+0x4fc>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7ff faf3 	bl	80010d8 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af6:	f7ff faef 	bl	80010d8 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e037      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x46a>
 8001b14:	e02f      	b.n	8001b76 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b16:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <HAL_RCC_OscConfig+0x4fc>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fadc 	bl	80010d8 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff fad8 	bl	80010d8 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e020      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x498>
 8001b42:	e018      	b.n	8001b76 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e013      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d001      	beq.n	8001b76 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40007000 	.word	0x40007000
 8001b88:	42420060 	.word	0x42420060

08001b8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0d0      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba0:	4b6a      	ldr	r3, [pc, #424]	; (8001d4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d910      	bls.n	8001bd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bae:	4b67      	ldr	r3, [pc, #412]	; (8001d4c <HAL_RCC_ClockConfig+0x1c0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 0207 	bic.w	r2, r3, #7
 8001bb6:	4965      	ldr	r1, [pc, #404]	; (8001d4c <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b63      	ldr	r3, [pc, #396]	; (8001d4c <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0b8      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d020      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be8:	4b59      	ldr	r3, [pc, #356]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	4a58      	ldr	r2, [pc, #352]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bf2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c00:	4b53      	ldr	r3, [pc, #332]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4a52      	ldr	r2, [pc, #328]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0c:	4b50      	ldr	r3, [pc, #320]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	494d      	ldr	r1, [pc, #308]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d040      	beq.n	8001cac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d115      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e07f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d107      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4a:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d109      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e073      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5a:	4b3d      	ldr	r3, [pc, #244]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e06b      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c6a:	4b39      	ldr	r3, [pc, #228]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f023 0203 	bic.w	r2, r3, #3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4936      	ldr	r1, [pc, #216]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c7c:	f7ff fa2c 	bl	80010d8 <HAL_GetTick>
 8001c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	e00a      	b.n	8001c9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c84:	f7ff fa28 	bl	80010d8 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e053      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9a:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 020c 	and.w	r2, r3, #12
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d1eb      	bne.n	8001c84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cac:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_RCC_ClockConfig+0x1c0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d210      	bcs.n	8001cdc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 0207 	bic.w	r2, r3, #7
 8001cc2:	4922      	ldr	r1, [pc, #136]	; (8001d4c <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e032      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4916      	ldr	r1, [pc, #88]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	490e      	ldr	r1, [pc, #56]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d1a:	f000 f821 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	490a      	ldr	r1, [pc, #40]	; (8001d54 <HAL_RCC_ClockConfig+0x1c8>)
 8001d2c:	5ccb      	ldrb	r3, [r1, r3]
 8001d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d32:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <HAL_RCC_ClockConfig+0x1cc>)
 8001d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_RCC_ClockConfig+0x1d0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f98a 	bl	8001054 <HAL_InitTick>

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40022000 	.word	0x40022000
 8001d50:	40021000 	.word	0x40021000
 8001d54:	08002684 	.word	0x08002684
 8001d58:	20000068 	.word	0x20000068
 8001d5c:	2000006c 	.word	0x2000006c

08001d60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b087      	sub	sp, #28
 8001d64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d002      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0x30>
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d003      	beq.n	8001d96 <HAL_RCC_GetSysClockFreq+0x36>
 8001d8e:	e027      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d90:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d92:	613b      	str	r3, [r7, #16]
      break;
 8001d94:	e027      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	0c9b      	lsrs	r3, r3, #18
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	4a17      	ldr	r2, [pc, #92]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001da0:	5cd3      	ldrb	r3, [r2, r3]
 8001da2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d010      	beq.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	0c5b      	lsrs	r3, r3, #17
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	4a11      	ldr	r2, [pc, #68]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dba:	5cd3      	ldrb	r3, [r2, r3]
 8001dbc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a0d      	ldr	r2, [pc, #52]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dc2:	fb02 f203 	mul.w	r2, r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	e004      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a0c      	ldr	r2, [pc, #48]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001dd4:	fb02 f303 	mul.w	r3, r2, r3
 8001dd8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	613b      	str	r3, [r7, #16]
      break;
 8001dde:	e002      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001de2:	613b      	str	r3, [r7, #16]
      break;
 8001de4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001de6:	693b      	ldr	r3, [r7, #16]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	371c      	adds	r7, #28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000
 8001df8:	007a1200 	.word	0x007a1200
 8001dfc:	08002694 	.word	0x08002694
 8001e00:	080026a4 	.word	0x080026a4
 8001e04:	003d0900 	.word	0x003d0900

08001e08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <RCC_Delay+0x34>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <RCC_Delay+0x38>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	0a5b      	lsrs	r3, r3, #9
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e24:	bf00      	nop
  }
  while (Delay --);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1e5a      	subs	r2, r3, #1
 8001e2a:	60fa      	str	r2, [r7, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f9      	bne.n	8001e24 <RCC_Delay+0x1c>
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	20000068 	.word	0x20000068
 8001e40:	10624dd3 	.word	0x10624dd3

08001e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e041      	b.n	8001eda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff f85a 	bl	8000f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	4619      	mov	r1, r3
 8001e82:	4610      	mov	r0, r2
 8001e84:	f000 fa6e 	bl	8002364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d001      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e035      	b.n	8001f68 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a16      	ldr	r2, [pc, #88]	; (8001f74 <HAL_TIM_Base_Start_IT+0x90>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d009      	beq.n	8001f32 <HAL_TIM_Base_Start_IT+0x4e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f26:	d004      	beq.n	8001f32 <HAL_TIM_Base_Start_IT+0x4e>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <HAL_TIM_Base_Start_IT+0x94>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d111      	bne.n	8001f56 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2b06      	cmp	r3, #6
 8001f42:	d010      	beq.n	8001f66 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f54:	e007      	b.n	8001f66 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 0201 	orr.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40012c00 	.word	0x40012c00
 8001f78:	40000400 	.word	0x40000400

08001f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d122      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0202 	mvn.w	r2, #2
 8001fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f9b4 	bl	800232c <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f9a7 	bl	800231a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f9b6 	bl	800233e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d122      	bne.n	800202c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d11b      	bne.n	800202c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0204 	mvn.w	r2, #4
 8001ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2202      	movs	r2, #2
 8002002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f98a 	bl	800232c <HAL_TIM_IC_CaptureCallback>
 8002018:	e005      	b.n	8002026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f97d 	bl	800231a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f98c 	bl	800233e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b08      	cmp	r3, #8
 8002038:	d122      	bne.n	8002080 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b08      	cmp	r3, #8
 8002046:	d11b      	bne.n	8002080 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0208 	mvn.w	r2, #8
 8002050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2204      	movs	r2, #4
 8002056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f960 	bl	800232c <HAL_TIM_IC_CaptureCallback>
 800206c:	e005      	b.n	800207a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f953 	bl	800231a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f962 	bl	800233e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	2b10      	cmp	r3, #16
 800208c:	d122      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	2b10      	cmp	r3, #16
 800209a:	d11b      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0210 	mvn.w	r2, #16
 80020a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2208      	movs	r2, #8
 80020aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f936 	bl	800232c <HAL_TIM_IC_CaptureCallback>
 80020c0:	e005      	b.n	80020ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f929 	bl	800231a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f938 	bl	800233e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d10e      	bne.n	8002100 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d107      	bne.n	8002100 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0201 	mvn.w	r2, #1
 80020f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe fe7a 	bl	8000df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210a:	2b80      	cmp	r3, #128	; 0x80
 800210c:	d10e      	bne.n	800212c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002118:	2b80      	cmp	r3, #128	; 0x80
 800211a:	d107      	bne.n	800212c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fa6b 	bl	8002602 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002136:	2b40      	cmp	r3, #64	; 0x40
 8002138:	d10e      	bne.n	8002158 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002144:	2b40      	cmp	r3, #64	; 0x40
 8002146:	d107      	bne.n	8002158 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f8fc 	bl	8002350 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	2b20      	cmp	r3, #32
 8002164:	d10e      	bne.n	8002184 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0320 	and.w	r3, r3, #32
 8002170:	2b20      	cmp	r3, #32
 8002172:	d107      	bne.n	8002184 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0220 	mvn.w	r2, #32
 800217c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 fa36 	bl	80025f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_TIM_ConfigClockSource+0x1c>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e0b4      	b.n	8002312 <HAL_TIM_ConfigClockSource+0x186>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021e0:	d03e      	beq.n	8002260 <HAL_TIM_ConfigClockSource+0xd4>
 80021e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021e6:	f200 8087 	bhi.w	80022f8 <HAL_TIM_ConfigClockSource+0x16c>
 80021ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ee:	f000 8086 	beq.w	80022fe <HAL_TIM_ConfigClockSource+0x172>
 80021f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f6:	d87f      	bhi.n	80022f8 <HAL_TIM_ConfigClockSource+0x16c>
 80021f8:	2b70      	cmp	r3, #112	; 0x70
 80021fa:	d01a      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0xa6>
 80021fc:	2b70      	cmp	r3, #112	; 0x70
 80021fe:	d87b      	bhi.n	80022f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002200:	2b60      	cmp	r3, #96	; 0x60
 8002202:	d050      	beq.n	80022a6 <HAL_TIM_ConfigClockSource+0x11a>
 8002204:	2b60      	cmp	r3, #96	; 0x60
 8002206:	d877      	bhi.n	80022f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002208:	2b50      	cmp	r3, #80	; 0x50
 800220a:	d03c      	beq.n	8002286 <HAL_TIM_ConfigClockSource+0xfa>
 800220c:	2b50      	cmp	r3, #80	; 0x50
 800220e:	d873      	bhi.n	80022f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002210:	2b40      	cmp	r3, #64	; 0x40
 8002212:	d058      	beq.n	80022c6 <HAL_TIM_ConfigClockSource+0x13a>
 8002214:	2b40      	cmp	r3, #64	; 0x40
 8002216:	d86f      	bhi.n	80022f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002218:	2b30      	cmp	r3, #48	; 0x30
 800221a:	d064      	beq.n	80022e6 <HAL_TIM_ConfigClockSource+0x15a>
 800221c:	2b30      	cmp	r3, #48	; 0x30
 800221e:	d86b      	bhi.n	80022f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002220:	2b20      	cmp	r3, #32
 8002222:	d060      	beq.n	80022e6 <HAL_TIM_ConfigClockSource+0x15a>
 8002224:	2b20      	cmp	r3, #32
 8002226:	d867      	bhi.n	80022f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002228:	2b00      	cmp	r3, #0
 800222a:	d05c      	beq.n	80022e6 <HAL_TIM_ConfigClockSource+0x15a>
 800222c:	2b10      	cmp	r3, #16
 800222e:	d05a      	beq.n	80022e6 <HAL_TIM_ConfigClockSource+0x15a>
 8002230:	e062      	b.n	80022f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6899      	ldr	r1, [r3, #8]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f000 f95e 	bl	8002502 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002254:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	609a      	str	r2, [r3, #8]
      break;
 800225e:	e04f      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	6899      	ldr	r1, [r3, #8]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f000 f947 	bl	8002502 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002282:	609a      	str	r2, [r3, #8]
      break;
 8002284:	e03c      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	6859      	ldr	r1, [r3, #4]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	461a      	mov	r2, r3
 8002294:	f000 f8be 	bl	8002414 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2150      	movs	r1, #80	; 0x50
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f915 	bl	80024ce <TIM_ITRx_SetConfig>
      break;
 80022a4:	e02c      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	6859      	ldr	r1, [r3, #4]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	461a      	mov	r2, r3
 80022b4:	f000 f8dc 	bl	8002470 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2160      	movs	r1, #96	; 0x60
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f905 	bl	80024ce <TIM_ITRx_SetConfig>
      break;
 80022c4:	e01c      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6859      	ldr	r1, [r3, #4]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	461a      	mov	r2, r3
 80022d4:	f000 f89e 	bl	8002414 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2140      	movs	r1, #64	; 0x40
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f8f5 	bl	80024ce <TIM_ITRx_SetConfig>
      break;
 80022e4:	e00c      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4619      	mov	r1, r3
 80022f0:	4610      	mov	r0, r2
 80022f2:	f000 f8ec 	bl	80024ce <TIM_ITRx_SetConfig>
      break;
 80022f6:	e003      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
      break;
 80022fc:	e000      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002310:	7bfb      	ldrb	r3, [r7, #15]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr

0800233e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
	...

08002364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a25      	ldr	r2, [pc, #148]	; (800240c <TIM_Base_SetConfig+0xa8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d007      	beq.n	800238c <TIM_Base_SetConfig+0x28>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002382:	d003      	beq.n	800238c <TIM_Base_SetConfig+0x28>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a22      	ldr	r2, [pc, #136]	; (8002410 <TIM_Base_SetConfig+0xac>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d108      	bne.n	800239e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	4313      	orrs	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a1a      	ldr	r2, [pc, #104]	; (800240c <TIM_Base_SetConfig+0xa8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d007      	beq.n	80023b6 <TIM_Base_SetConfig+0x52>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ac:	d003      	beq.n	80023b6 <TIM_Base_SetConfig+0x52>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a17      	ldr	r2, [pc, #92]	; (8002410 <TIM_Base_SetConfig+0xac>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d108      	bne.n	80023c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a07      	ldr	r2, [pc, #28]	; (800240c <TIM_Base_SetConfig+0xa8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d103      	bne.n	80023fc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	615a      	str	r2, [r3, #20]
}
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	40012c00 	.word	0x40012c00
 8002410:	40000400 	.word	0x40000400

08002414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	f023 0201 	bic.w	r2, r3, #1
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800243e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f023 030a 	bic.w	r3, r3, #10
 8002450:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	621a      	str	r2, [r3, #32]
}
 8002466:	bf00      	nop
 8002468:	371c      	adds	r7, #28
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	f023 0210 	bic.w	r2, r3, #16
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800249a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	031b      	lsls	r3, r3, #12
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	621a      	str	r2, [r3, #32]
}
 80024c4:	bf00      	nop
 80024c6:	371c      	adds	r7, #28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b085      	sub	sp, #20
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f043 0307 	orr.w	r3, r3, #7
 80024f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	609a      	str	r2, [r3, #8]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002502:	b480      	push	{r7}
 8002504:	b087      	sub	sp, #28
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800251c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	021a      	lsls	r2, r3, #8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	431a      	orrs	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	4313      	orrs	r3, r2
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	609a      	str	r2, [r3, #8]
}
 8002536:	bf00      	nop
 8002538:	371c      	adds	r7, #28
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002554:	2302      	movs	r3, #2
 8002556:	e041      	b.n	80025dc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d009      	beq.n	80025b0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a4:	d004      	beq.n	80025b0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a10      	ldr	r2, [pc, #64]	; (80025ec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d10c      	bne.n	80025ca <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40012c00 	.word	0x40012c00
 80025ec:	40000400 	.word	0x40000400

080025f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <__libc_init_array>:
 8002614:	b570      	push	{r4, r5, r6, lr}
 8002616:	2600      	movs	r6, #0
 8002618:	4d0c      	ldr	r5, [pc, #48]	; (800264c <__libc_init_array+0x38>)
 800261a:	4c0d      	ldr	r4, [pc, #52]	; (8002650 <__libc_init_array+0x3c>)
 800261c:	1b64      	subs	r4, r4, r5
 800261e:	10a4      	asrs	r4, r4, #2
 8002620:	42a6      	cmp	r6, r4
 8002622:	d109      	bne.n	8002638 <__libc_init_array+0x24>
 8002624:	f000 f822 	bl	800266c <_init>
 8002628:	2600      	movs	r6, #0
 800262a:	4d0a      	ldr	r5, [pc, #40]	; (8002654 <__libc_init_array+0x40>)
 800262c:	4c0a      	ldr	r4, [pc, #40]	; (8002658 <__libc_init_array+0x44>)
 800262e:	1b64      	subs	r4, r4, r5
 8002630:	10a4      	asrs	r4, r4, #2
 8002632:	42a6      	cmp	r6, r4
 8002634:	d105      	bne.n	8002642 <__libc_init_array+0x2e>
 8002636:	bd70      	pop	{r4, r5, r6, pc}
 8002638:	f855 3b04 	ldr.w	r3, [r5], #4
 800263c:	4798      	blx	r3
 800263e:	3601      	adds	r6, #1
 8002640:	e7ee      	b.n	8002620 <__libc_init_array+0xc>
 8002642:	f855 3b04 	ldr.w	r3, [r5], #4
 8002646:	4798      	blx	r3
 8002648:	3601      	adds	r6, #1
 800264a:	e7f2      	b.n	8002632 <__libc_init_array+0x1e>
 800264c:	080026a8 	.word	0x080026a8
 8002650:	080026a8 	.word	0x080026a8
 8002654:	080026a8 	.word	0x080026a8
 8002658:	080026ac 	.word	0x080026ac

0800265c <memset>:
 800265c:	4603      	mov	r3, r0
 800265e:	4402      	add	r2, r0
 8002660:	4293      	cmp	r3, r2
 8002662:	d100      	bne.n	8002666 <memset+0xa>
 8002664:	4770      	bx	lr
 8002666:	f803 1b01 	strb.w	r1, [r3], #1
 800266a:	e7f9      	b.n	8002660 <memset+0x4>

0800266c <_init>:
 800266c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800266e:	bf00      	nop
 8002670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002672:	bc08      	pop	{r3}
 8002674:	469e      	mov	lr, r3
 8002676:	4770      	bx	lr

08002678 <_fini>:
 8002678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267a:	bf00      	nop
 800267c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800267e:	bc08      	pop	{r3}
 8002680:	469e      	mov	lr, r3
 8002682:	4770      	bx	lr
